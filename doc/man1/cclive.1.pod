=pod

=head1 NAME

cclive - media download tool

=head1 SYNOPSIS

cclive [options] [url | file...]

=head1 DESCRIPTION

cclive is a tool for downloading media from YouTube and similar
websites. It has a low memory footprint compared to other existing
tools.

=head1 OPTIONS

Unless an arg is specified in the command line, cclive reads from the
stdin. The command line args may be either URLs or files to read.
If cclive reads from either stdin or files, it expects each URL to be
separated by a newline or whitespace character.

=over 4

=item B<--version>

Print version and exit.

=item B<--help>

Print help and exit.

=item B<--license>

Print license and exit.

=item B<--support>

Print supported hosts and exit.

=item B<--verbose-libcurl>

Turn on libcurl verbose output.

=item B<-q, --quiet>

Turn off all output to stdout and stderr with the exception of
C<--verbose-libcurl>, if enabled, libcurl will continue to print
messages to stderr.

=item B<-b, --background>

Go to background after startup. Output will be written to
the file specified with C<--log-file>.

=item B<-F, --query-formats>

Query available formats to an URL. The returned string will contain
an array of I<format strings>, each separated by the '|' character.
The array is created, by libquvi, from the data returned by the server.
You can use these I<format strings> with C<--format>.

See also L</EXAMPLES>, C<--format> and C<--prefer-format>.

=item B<-f, --format> I<arg> (=default)

Download format I<arg> of the media. The I<arg> can also be C<default>,
C<best>, C<help> or C<list>. Note, however, that of these, the C<list> and
the C<help> are deprecated and will be removed in the later versions of
cclive.

The I<arg> value is used with all of the URLs fed to cclive at runtime.
If the I<arg> is C<best>, libquvi will determine the C<best> format available
to an URL.

If the I<arg> is C<default> libquvi attempts to return an URL to whatever
was deemed to be the C<default> format to the URL. libquvi will switch
to C<default> format if the I<arg> was unregonized or the requested
I<arg> format was unavailable.

For the above reasons, the downloaded format may be different from the
requested I<arg> format.

For details about the YouTube's "fmt" IDs, refer to:
 http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs

See also L</EXAMPLES>, C<--query-formats> and C<--prefer-format>.

=item B<-c, --continue>

Resume partially downloaded media.

=item B<-W, --overwrite>

Overwrite existing media.

=item B<-O, --output-file> I<arg>

Write media to I<arg>. Overrides C<--filename-format>.

=item B<-n, --no-download>

Do not download the media, print details only.

=item B<-r, --no-resolve>

Do not resolve URL redirections. If enabled, breaks the compatibility
with most "shortened" URLs.

=item B<--no-proxy>

Disable use of HTTP proxy. Overrides both C<--proxy> and http_proxy environment
settings.

=item B<--log-file> I<arg> (=cclive_log)

Write log output to I<arg>. Ignored unless used with C<--background>.
Overwrites the existing I<arg> file (if any). See also C<--background>
and C<--update-interval>.

=item B<--config-file> I<arg> (=$HOME/.ccliverc)

Path to a file to read cclive arguments from.

=back

=head1 OPTIONS - CONFIGURATION

In addition to the command line, the configurable options may also be read
from the configuration file. See L</FILES>.

=over 4

=item B<-p, --prefer-format> I<arg>

Where I<arg> is a B<string pair> of I<pattern> (regular expression)
and I<format>. The character ':' is expected to separate these two
strings, e.g. C<-p foo:bar>. If the I<pattern> matches an URL,
cclive downloads the I<format> of the media from the URL.

C<--prefer-format> works similarly to C<--format> with the difference
that -p binds the I<format> value to a matching URL. In contrast, the
C<--format> value is used with all of the URLs fed to cclive at runtime.

C<--format> negates C<--prefer-format>. cclive accepts multiple
occurrences of C<--prefer-format>.

See also L</EXAMPLES>, C<--query-formats> and C<--format>.

=item B<--progressbar> I<arg> (=normal)

Use progressbar I<arg>. Ignored with C<--background> which will
always use 'dotline' type. I<arg> can be one of the following strings:

 normal   .. Default
 dotline  .. Used by --background as default
 simple   .. Less verbose

=item B<--update-interval> I<arg> (=1)

Specify I<arg> progressbar update interval in seconds. The value may be
a 'double', e.g. 0.2 or 1.99.

=item B<--filename-format> I<arg> (="%t.%s")

How the downloaded media file should be named.  Each occurence of the
following specifiers will be replaced in the I<arg>:

 %t .. Media title
 %i .. Media ID
 %h .. Media host ID (e.g. "vimeo")
 %s .. Media file suffix (e.g. "flv")

See also C<--tr>.

=item B<--output-dir> I<arg>

Write downloaded media to I<arg> directory.

=item B<-t, --tr> I<arg>

Where I<arg> is a pattern (regular expression). C<--tr> can be used to
translate the characters in the media titles before they are used in
the filenames of the downloaded media. Default is C</(\w|\s)/g>.

cclive accepts multiple occurrences of C<--tr>. See also L</EXAMPLES>.

=item B<--regexp> I<arg> (="/(\w|\s)/g")

Regular expression I<arg> to cleanup the media title before it
is used in the filename. Supports "i" (case-insensitive) and "g"
(global or "find all").

This option is deprecated and will be removed in the later versions of
cclive. Use C<--tr> instead.

=item B<--subst> I<arg> ...

Replace matched occurences in the media filename after applying
C<--filename-format> and C<--regexp>. To use multiple substitutions,
separate each expression in I<arg> with a whitespace. Supports "i"
(case-insensitive) and "g" (global or "find all").

Delimiters supported:

 <> {} () /

Note:

 s/old/new/  .. Invalid
 s/old//new/ .. OK

This option is deprecated and will be removed in the later versions of
cclive. Use C<--tr> instead.

=item B<--exec> I<arg>

Invoke I<arg> after each successfully finished download. Each occurence
of the following specifiers will be replaced (and double-quoted) in the
I<arg>:

 %f .. Full path to the downloaded media file

=item B<--agent> I<arg> (="Mozilla/5.0")

Identify cclive as I<arg> to the HTTP servers.

=item B<--proxy> I<arg>

Use I<arg> for HTTP proxy, e.g. "http://foo:1234". Overrides
http_proxy environment setting.

=item B<--throttle> I<arg> (=0, disabled)

Do not exceed the transfer rate I<arg> KB/s.

=item B<--connect-timeout> I<arg> (=30)

This option wraps the CURLOPT_CONNECTTIMEOUT (libcurl):

"Pass a long. It should contain the maximum time in seconds that
you allow the connection to the server to take.

This only limits the connection phase, once it has connected,
this option is of no more use. Set to zero to disable connection
timeout (it will then only timeout on the system's internal
timeouts). See also the CURLOPT_TIMEOUT option."
-- C<curl_easy_setopt(3)>

=item B<--transfer-timeout> I<arg> (=0, disabled)

This option wraps the CURLOPT_TIMEOUT (libcurl):

"Pass a long as parameter containing the maximum time in seconds
that you allow the libcurl transfer operation to take.

Normally, name lookups can take a considerable time and limiting
operations to less than a few minutes risk aborting perfectly
normal operations. This option will cause curl to use the
SIGALRM to enable time-outing system calls."
-- C<curl_easy_setopt(3)>

=item B<--dns-cache-timeout> I<arg> (=60)

This option wraps the CURLOPT_DNS_CACHE_TIMEOUT (libcurl):

"Pass a long, this sets the timeout in seconds. Name resolves will
be kept in memory for this number of seconds. Set to zero to
completely disable caching, or set to -1 to make the cached
entries remain forever. By default, libcurl caches this info
for 60 seconds.

The name resolve functions of various libc implementations don't
re-read name server information unless explicitly told so
(for example, by calling C<res_init(3)>). This may cause libcurl
to keep using the older server even if DHCP has updated the
server info, and this may look like a DNS cache issue to the
casual libcurl-app user."
-- C<curl_easy_setopt(3)>

=item B<--max-retries> I<arg> (=5, 0=disabled)

Retry downloading I<arg> times before giving up.

=item B<--retry-wait> I<arg> (=5)

Wait I<arg> seconds before retrying after a failed attempt.

=back

=head1 EXAMPLES

Put the URLs inside quotes when they are specified as the command line
arguments to the program. This is the recommended practice.

=over 4

=item cclive "URL"

Typical use.

=item cclive -F "URL"

Query available formats to the URL. You can then use one of the
format strings from the returned array with C<--format>.

=item cclive -f best "URL"

Download the best available format of the media.

=item cclive -p "^.*youtube.*\.com:fmt43_360p" "YOUTUBE_URL"

Get the fmt43_360p format of YouTube videos whenever possible.

=item cclive -n "URL"

Do not download the media, print the details only.

=item cclive "URL" -t 's/foo/bar/g'

Replace any "foo" substrings with "bar" in the media title before
using it in the output filename.

=item cclive "URL" -b --log-file foo.log

Go to background, redirect output to C<foo.log>.

=item pkill -USR1 cclive

Interrupt the current download of all matching cclive processes. Causes
cclive to move onto the next URL in the queue, if any.

=back

=head1 FILES

=over 4

=item B<$HOME/.ccliverc>

Or use C<--config-file>. See C<--help> or L</OPTIONS - CONFIGURATION>
for the configurable options.

Example:

 filename-format = %h_%i_(%t).%s
 proxy = http://foo:1234
 exec = /usr/bin/vlc %f
 regexp = /(\w|\pL)/g
 progressbar = simple
 prefer-format = ^.*youtube.*\.com:fmt43_360p
 prefer-format = dailym:best

=back

=head1 EXIT STATUS

cclive exits with 0 on success and >0 if an (unrecoverable) error
occurred.

=head1 DEBUGGING TIPS

=over 4

=item B<--no-download>

Use the C<--no-download> switch when you don't need to download the media.

=item B<--verbose-libcurl>

Make libcurl verbose.

=item B<Debug symbols>

Compile cclive with C<-g>, see also C<gcc(1)>.

=item B<Other tools>

See also C<gdb(1)>, C<strace(1)> and C<valgrind(1)>.

=back

=head1 WWW

 Home  : http://cclive.sourceforge.net/
 gitweb: http://repo.or.cz/w/cclive.git

=head1 BACKGROUND

The name "clive" originates from the words "command line video extration",
the prepending "c" refers to C or C++. cclive is a rewrite of C<clive(1)>
in C++.

=head1 LICENSE

cclive is free software, licensed under the GPLv3+.

=head1 AUTHOR

Toni Gundogdu <legatvs at sign gmail com>.

Thanks to all those who have contributed to the project by sending
patches, reporting bugs and writing feedback. You know who you are.

=cut
