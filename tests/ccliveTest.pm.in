#
# Copyright (C) 2010 Toni Gundogdu.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

package ccliveTest;

use warnings;
use strict;

use POSIX ":sys_wait_h";
use File::Basename qw(basename);

require Exporter;
use vars qw(@ISA @EXPORT @EXPORT_OK);

our @ISA       = qw(Exporter);
our @EXPORT    = ();
our @EXPORT_OK = qw(run pod_checks check_codeset);

use constant CCLIVE_PATH => "@top_builddir@/src/cclive";

sub run {
    my @args = ( CCLIVE_PATH, );

    my $extra = $ENV{CCLIVE_TEST_OPTIONS};

    @args = ( @args, split( /\s+/, $extra ) )
        if ($extra);

    foreach (@_) {
        if ($_ =~ /--remote/) {
            if ($ENV{NO_INTERNET}) {
                print STDERR "SKIP: No internet.\n";
                return 0;
            }
        }
        else {
            push @args, $_;
        }
    }


    printf "\nTEST: %s\nRUN: ", basename($0);
    print qq/"$_"/ . " " foreach @args;
    print "\n";

    my $child = fork;
    if ( $child < 0 ) {
        die "fork: $! ($?)";
    }
    elsif ( $child == 0 ) {
        exit( system(@args) >> 8 );
    }

    print "\n";

    my $rc;
    while (1) {
        my $result = waitpid( $child, 0 );

        if ( $result == -1 ) {
            die "no more processes to wait: pid $child not found";
        }
        elsif ( $result == 0 ) {

            # $child is still running.
            next;
        }
        elsif ( $result != $child ) {
            die "got invalid pid $result (expected $child)";
        }

        print STDERR "  ";

        my $status = $?;
        if ( WIFEXITED($status) ) {
            $rc = WEXITSTATUS($status);
            print STDERR "-> child: normal termination ($rc)\n";
            last;
        }
        elsif ( WIFSIGNALED($status) ) {
            $rc = WTERMSIG($status);
            print STDERR "-> child: abnormal termination ($rc)\n";
            last;
        }
        elsif ( WIFSTOPPED($status) ) {
            $rc = WSTOPSIG($status);
            print STDERR "-> child: stopped ($rc)\n";
            last;
        }
    }

    return $rc;
}

# Check the pod markup.
sub pod_checks {
    require Pod::Checker;
    my $rc = Pod::Checker::podchecker("@top_srcdir@/cclive.pod");
    return $rc;
}

# Returns current locale codeset. Terminates if codeset
# is not matched to UTF-8/16/32.
sub check_codeset {
    my $cs;
    eval {
        require I18N::Langinfo;
        I18N::Langinfo->import( qw(langinfo CODESET) );
        $cs = langinfo( CODESET() );
    };
    my $skip = 0;
    if ($@) { $skip = 1; }
    else    { if ($cs !~ /^utf/i) { $skip = 1; } }
    if ($skip) {
        print STDERR "SKIP: No utf-8 (or utf-16, utf-32) locale codeset.\n";
        exit (0);
    }
}

1;
