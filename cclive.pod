=pod

=head1 NAME

cclive - video extraction utility for the flash dismissing hordes

=head1 SYNOPSIS

cclive [options] [url...]

=head1 DESCRIPTION

cclive is command line video extraction utility similar to clive but with
lower requirements.

=head1 OPTIONS

=over 4

=item B<-h, --help>

Print help and exit.

=item B<-v, --version>

Print version and exit.

=item B<--hosts>

Print a list of supported hosts to stdout and exit.

=item B<-q, --quiet>

Turn off all output.

=item B<--debug>

Print libcurl debug messages to stderr.

=item B<-t, --title>  [req. --with-perl]

Causes B<cclive> to use video page title for output video filename.
Ignored if cclive was built --without-perl.

=item B<--title-cclass=>I<CCLASS>  [req. --with-perl]

The I<character-class> is used to cleanup the video page <title>.
Default is B<\w>. The cleaned up title is then used to name the
output file.

The default I<class> is usually enough for most users. You can learn
more about character classes here:
  http://perldoc.perl.org/perlrequick.html

=item B<-n, --no-extract>

Do not extract any videos.

=item B<-c, --continue>

Resume a partially downloaded video file. May not work with some of the HTTP
servers. Be sure to read the L</FORMATS> section.

=item B<-f, --format=>I<FORMAT>

Extract I<format> instead of the default "flv".

Note that the I<format> is host specific. See the L</FORMATS> section.

=item B<-O, --output-video=>I<FILE>

Write extracted video to I<file>. Causes B<cclive> to overwrite the existing
file unless the file is fully retrieved already.

Do I<not> use this when extracting multiple videos on one run.

=item B<-N, --number-videos>

Add a numeric prefix to the video filenames.

=item B<--filename-format=>I<STRING>

Use I<string> to format the output video filename. If any of the following
specifiers appear anywhere in the I<string>, they will be replaced accordingly:

  %t = page title
  %i = id
  %h = host string
  %s = file suffix

Note that "%t" is replaced only if B<cclive> was built --with-perl and
the B<--title> option was used. Otherwise "%t" equals to "%i".

Example:
  % cclive --filename-format="%i.%s" -n URL

=item B<--emit-csv>

Emit video details as CSV to stdout. Implies B<--no-extract>.

Can be used together with B<--quiet>.

=item B<--limit-rate=>I<AMOUNT>

Limit download speed to I<amount> (KB/s). Does not limit video page fetches.

=item B<--agent=>I<STRING>

Identify B<cclive> as I<string> to the HTTP servers.

=item B<--proxy=>I<ADDRESS>

Use I<address> for HTTP proxy.

Example:
  --proxy=http://foo:1234

B<cclive> uses the value of the http_proxy environment variable by default
if it is defined.


=item B<--no-proxy>

Do not use proxy, even if http_proxy environment variable is defined.

=item B<--connect-timeout=>I<SECONDS>

Maximum time in I<seconds> allowed the connection to the server to take.
This limits only the connection phase. B<cclive> will only timeout
on the system's internal timeouts by default.

http://curl.haxx.se/docs/knownbugs.html:

  "34. The SOCKS4 connection codes don't properly acknowledge
       (connect) timeouts. Also see #12. According to bug #1556528,
       even the SOCKS5 connect code does not do it right:
       http://curl.haxx.se/bug/view.cgi?id=1556528"

  "12. When connecting to a SOCKS proxy, the (connect) timeout
       is not properly acknowledged after the actual TCP connect
       (during the SOCKS 'negotiate' phase)."

See also B<--connect-timeout-socks>.

=item B<--connect-timeout-socks=>I<SECONDS>

Same as B<--connect-timeout> but works around the SOCKS proxy bug by using
CURLOPT_TIMEOUT instead of CURLOPT_CONNECTIMEOUT.

Ignored for file transfers, otherwise curl could interrupt started transfers.

More about these curl options:
  http://curl.haxx.se/libcurl/c/curl_easy_setopt.html

=item B<-u, --youtube-user=>I<USERNAME>

Causes B<cclive> to log into Youtube as I<username>. This is done I<before>
extraction, even if the batch does not contain any Youtube video links.

=item B<-p, --youtube-pass=>I<PASSWORD>

Use I<password> for Youtube login.  If undefined, B<cclive> prompts for it.

=item B<--exec=>I<COMMAND>B<;>

Execute I<command> after each file transfer. Optional arguments may be passed
to the command. The expression must be terminated by a semicolon (";").

If the specifier "%i" appears anywhere in I<command> name or the arguments
it is replaced by the pathname of the extracted video file.

Example:
  % cclive --exec="mplayer -really-quiet %i;" URL

=item B<--exec=>I<COMMAND>B<+>

Same as B<--exec>, except that "%i" is replaced with as many pathnames
as possible for the invocation of I<command>.

=item B<--stream-exec=>I<COMMAND>

Execute I<command> when file transfer progress reaches I<percent> as defined
with the B<--stream> option. If a "%i" specifier is used in the I<command>
expression, it will be replaced with video pathname.

B<cclive> forks the I<command> and continues with the transfer. Note that
B<cclive> will not continue to download another file before the child process
terminates.

Some players and formats may not work properly with this feature.
L<mplayer(1)> is known to work properly with most flv videos.

=item B<--stream=>I<PERCENT>

Execute the I<command> defined with the B<--stream-exec> option when the
file transfer progress reaches I<percent>.

Example:
  % cclive --stream-exec="mplayer -really-quiet %i" --stream=20 URL

Note that B<cclive> does nothing to check if there is enough data buffered
before forking the stream process. If the transfer rate drops significantly
after starting the process and it runs out of data, B<cclive> does nothing
to fix this.

=item B<--print-fname>

Print output filename on a dedicated line before each file transfer.

=back

=head1 EXAMPLES

Typical use:
  % cclive URL

Download mp4 format of the video from the URL:
  % cclive -f mp4 URL

Play the downloaded video with L<mplayer(1)> subsequently:
  % cclive --exec="mplayer -really-quiet %i;" URL

Extract audio to an mp3 file from the downloaded video with L<ffmpeg(1)>:
  % cclive --exec="ffmpeg -i %i %i.mp3;" URL

Start playing the video being downloaded with L<mplayer(1)> when the transfer
reaches 20%:
  % cclive --stream-exec="mplayer -really-quiet %i" --stream=20 URL

=head1 FORMATS

cclive defaults to extract the flv format unless the B<--format> option is
used. The requested format may not always be available. The server typically
returns one of the HTTP/40x errors if the requested format is not available.

The quality of the video depends on the uploaded video quality. Each website
typically recompresses the uploaded videos to 320x240 resolution (sometimes
higher). Because this varies per video and website, you should treat the
list below only as a rough reference of what formats should be available.

=over 4

=item B<www.youtube.com>

=item B<www.last.fm>

Formats: (flv|mp4|fmt35|fmt22|fmt17|fmt6)  Continue: Yes (except flv)

flv and mp4 are typically available, whereas others may or may not be
vailable. For example the high-definition (HD) formats (35, 22) are
currently available for a limited number of videos, which are usually
explicitly as "HD" or "720p".

last.fm is known to wrap Youtube videos. B<clive> can handle such
last.fm video links.

=item B<video.google.com>

Formats: (flv|mp4)  Continue: Only mp4

The mp4 may not always be available. GoogleVideo mp4 are encoded using a
different codec than Youtube mp4 videos. You can typically B<--stream-exec>
Youtube mp4 videos but this is not case with GoogleVideo mp4 videos. If you
find a way, drop an email.

=item B<www.sevenload.com>

Formats: flv  Continue: Yes

=item B<www.break.com>

Formats: flv  Continue: Yes

=item B<www.liveleak.com>

Formats: flv  Continue: Yes

=item B<www.evisor.tv>

Formats: flv  Continue: Yes

=item B<www.dailymotion.com>

Formats: (spark|spak-mini|vp6-hq|vp6-hd|vp6|h264)  Continue: Yes

spark is the "regular" 320x240 flv. B<clive> defaults to spark
if requested format is not available.

=back

=head1 FILES

=over 4

=item B<$HOME/.ccliverc>

 agent      = Furball/1.0       # --agent=...
 proxy      = http://foo:1234   # --proxy=...
 limit-rate = 50                # --limit-rate=...
 title                          # --title
 no-extract                     # --no-extract

Most of the program options can be defined in the ~/.ccliverc config file.

=back

=head1 EXIT STATUS

cclive exits 0 on success, and >0 if an error occurs.

=head1 OTHER

Project page:
  http://code.google.com/p/cclive/

Development code:
  % git clone git://repo.or.cz/cclive.git

Release announcements:
  http://freshmeat.net/projects/cclive/

Front-end:
  http://code.google.com/p/abby/

=head1 HISTORY

cclive first appeared early 2009 following the release of clive2.
It was originally written in C but was later rewritten in C++.

=head1 SEE ALSO

L<clive(1)>

=head1 AUTHOR

Toni Gundogdu <legatvs@gmail.com>

=cut
