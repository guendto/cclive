=pod

=head1 NAME

cclive - lightweight video extraction tool

=head1 SYNOPSIS

cclive [options] [url...]

=head1 DESCRIPTION

cclive is lightweight command line video extraction tool for Youtube and
other similar video-sharing websites. It resembles clive in many aspects
but has lower requirements.

=head1 OPTIONS

=over 4

=item B<-h, --help>

Print help and exit.

=item B<-v, --version>

Print version and exit.

=item B<--hosts>

Print supported hosts and exit.

=back

B<Output>

=over 4

=item B<-q, --quiet>

Turn off all output.

=item B<--debug>

Print libcurl debug messages to stderr.

=item B<--emit-csv>

Print video details in CSV. Implies B<--no-extract>.
Ignores B<--quiet> for CSV.

=item B<--print-fname>

Print filename on one line before download starts.

=back

B<HTTP>

=over 4

=item B<--agent>=I<string>

Identify cclive as I<string> to the HTTP servers.

=item B<--proxy>=I<proxyhost[:port]>

Use the specified HTTP proxy. Overrides http_proxy definition.

=item B<--no-proxy>

Do not use HTTP proxy, even if http_proxy environment variable is defined.

=item B<--connect-timeout>=I<seconds>

Maximum time in I<seconds> allowed for connection to take. Defaults to 30.

=item B<--connect-timeout-socks>=I<seconds>

Otherwise identical to the above option but works around the known SOCKS
proxy bug in libcurl. Defaults to 30.

=back

B<Download>

=over 4

=item B<-n, --no-extract>

Do not actually extract any videos, simulate only.

=item B<-c, --continue>

Continue a partially downloaded video file.

By default, cclive appends a numeric suffix (e.g. ".1") to the
filename if the file exists already, unless file is already completely
retrieved, or either --continue --output-video is defined.

=item B<l, --limit-rate>=I<amount>

Limit download speed to I<amount> (KB/s). Video page fetches remain
unaffected by this option.

=item B<-O, --output-video>=I<file>

Write the downloaded video I<file>.

=item B<-f, --format>=I<format>

Download I<format> of the video. If set to I<best>, cclive
attempts to download the best quality of the video.

See also L</FORMATS>.

=back

B<Subsequent>

=over 4

=item B<--exec>=I<expression>B<;>

Execute I<expression> after each file transfer. Optional arguments may be passed
to the command. The expression must be terminated by a semicolon (";").

If the specifier "%i" appears anywhere in I<expression> name or the arguments
it is replaced by the pathname of the extracted video file.

=item B<--exec>=I<expression>B<+>

Same as B<--exec>, except that "%i" is replaced with as many pathnames
as possible for the invocation of I<expression>.

=item B<-e, --exec-run>

Causes cclive to invoke the command defined with B<--exec> when download
finishes.

=back

B<Streaming>

=over 4

=item B<--stream-exec>=I<expression>

Define the command to be invoked with B<--stream> and B<--stream-pass>.

If a "%i" specifier is used in the I<expression>, it will be replaced with
either a video file path name (B<--stream>) or a parsed video link
(B<--stream-pass>).

=item B<-s, --stream-pass>

Otherwise the same as B<--stream> but instead of starting the download,
cclive passes the parsed video link to the command defined with
B<--stream-exec>. See also L</EXAMPLES>.

This option was inspired by a C<clive(1)> wrapper script contributed
by Bill Squire.

=item B<--stream>=I<percentage>

Causes cclive to fetch, parse, start download and eventually invoke
the command defined with B<--stream-exec> when the transfer reaches
the I<percentage> defined with this option. See also L</EXAMPLES>.

Note that cclive does nothing to check if there is enough data buffered
before invoking the B<--stream-exec> defined I<expression>. If the transfer
rate drops significantly after starting the process and it runs out of data,
cclive does nothing to fix this.

Also note that cclive will not continue to download another file before the
child process exits.

This mode is supported for historical reasons. Consider using
B<--stream-pass> instead.

=back

B<Filename formatting>

=over 4

=item B<-N, --number-videos>

Prepend a numeric prefix (e.g. "001_") to the output filenames.

=item B<-r, --regexp>=I<expression>

A regular expression to filter the video titles before using them for
output filenames. See also PCRE manual page for syntax, patterns, etc.
See also B<--filename-format>.

=item B<-g, --find-all>

Use repeated matching to find all occurences, like Perl's /g option.

=item B<-F, --filename-format>=I<formatstring>

Use the specified I<formatstring> to format the output filenames. cclive
defaults to "%h_%i.%s". Any supported specifiers (below) appearing in the
I<formatstring> will be replaced accordingly:

  %t = video title
  %i = video id
  %h = website id
  %s = file suffix

=back

=head1 EXAMPLES

=over 4

=item cclive URL

Download video from URL.

=item cclive -f fmt18 Youtube_URL

Download fmt18 (mp4) format of the video.

=item cclive --exec="mplayer -really-quiet %i;" -e URL

Play the downloaded video with C<mplayer(1)> subsequently.

=item cclive --exec="ffmpeg -i %i -acodec libvorbis %i.ogg;" -e URL

Copy audio from downloaded video to ogg with C<ffmpeg(1)>.

=item cclive --stream-exec="mplayer -really-quiet %i" --stream=20 URL

Start playing the video being downloaded with C<mplayer(1)> when the transfer
reaches 20%.

=item echo 'stream-exec = "mplayer -really-quiet %i"' >> ~/.ccliverc

=item cclive -s URL

Alternate to streaming with Adobe Flash. C<vlc(1)> and C<totem(1)> have been
reported to work also.

=item cclive -F "%t.%s" -r "(\w+)" URL

Grab the first "word" character from video title for output filename.

=item cclive -F "%t.%s" -gr "(\w|\s)" URL

Grab all "word" and "whitespace" characters from the video title and
use them for the output filename.

=back

=head1 FORMATS

"flv" is downloaded by default if B<--format> is not defined. Some
websites support more than one video format.

=over 4

=item youtube.com

=item last.fm

Format: (flv|fmt17|fmt18|fmt22|fmt35)

flv (fmt34) and fmt18 (mp4) are usually available. Others may be
available. At the time of writing this, the following formats
are recognized by both cclive and Youtube:

  hd  .. fmt22 .. mp4  (1280x720)
  hq  .. fmt35 .. flv   (640x380)
  mp4 .. fmt18 .. mp4   (480x360)
  flv .. fmt34 .. flv   (320x180)
  3gp .. fmt17 .. 3gp   (176x144)

Note that you can use either format ID, e.g. fmt22 or hd.

Some of the last.fm videos are actually hosted by Youtube.
cclive can be used to download such videos.

=item dailymotion.com

Format: (flv|spark-mini|vp6-hq|vp6-hd|vp6|h264)

The HD and HQ videos may not always be available.

  vp6-hd    .. on2   (1280x720)
  vp6-hq    .. on2     (848x480)
  h264      .. h264    (512x384)
  vp6       .. on2     (320x240)
  flv       .. flv     (320x240)
  spark-mini.. flv       (80x60)

=item golem.de

Format: (flv|high|ipod)

=item vimeo.com

Format: (flv|hd)

HD should be available for the vimeo.com/hd channel videos at least.
Note that "flv" only means the "default flv". Some of the hosted
"default" videos are actually "mp4", not "flv".

For further reading:

  http://vimeo.com/help/hd

=item video.google.com

Format: (flv|mp4)

mp4 may not always be available.

=item sevenload.com

=item break.com

=item liveleak.com

=item evisor.tv

=item clipfish.de

=item funnyhub.com

=item myubo.com

Format: flv

=back

=head1 FILES

=over 4

=item B<$CCLIVE_HOME|$HOME/.ccliverc>

 agent      = Furball/1.0       # --agent=...
 proxy      = http://foo:1234   # --proxy=...
 limit-rate = 50                # --limit-rate=...
 no-extract                     # --no-extract

Most of the program options can be defined in the ~/.ccliverc config file.

=back

=head1 UNICODE

=over 4

=item Q: Why am I seeing mangled video filenames?

Make sure you have compiled cclive --with-iconv. Some of the websites may
not use UTF-8. cclive converts data from such websites to UTF-8.

Make also sure you have set the locale. For example (in csh/urxvt terms):

  % setenv LANG en_US.UTF-8
  % urxvt &

You can get a list of supported locales on your typical Unix-like system with:

  % locale -a

=item Q: Why are the UTF-8 characters missing with -g --regexp="(\w|\s)"?

A quote from "man pcrepattern":

"In UTF-8 mode, characters with values greater than 128 never match  \d,
\s, or \w, and always match \D, \S, and \W. This is true even when Uni-
code character property support is available.  These  sequences  retain
their original meanings from before UTF-8 support was available, mainly
for efficiency reasons. Note that this also affects \b, because  it  is
defined in terms of \w and \W."

Try --regexp="(\w|\s|\pL").

=back

=head1 DEBUGGING

=over 4

=item cclive --debug URL

Causes libcurl to be verbose.

=item cclive -n URL

Simulates video extraction only.

=back

=head1 BUGS

Sure to be some. Please report them:

  <http://code.google.com/p/cclive/issues/>

=head1 EXIT STATUS

cclive exits 0 on success, and E<gt>0 if an error occurs.

  CCLIVE_OK           = 0
  CCLIVE_OPT          = 1  // cmdline option parsing error
  CCLIVE_OPTARG       = 2  // cmdline option arg error
  CCLIVE_CURLINIT     = 3  // curl init error
  CCLIVE_NOTHINGTODO  = 4  // file already retrieved
  CCLIVE_SYSTEM       = 5  // system call failed
  CCLIVE_NOSUPPORT    = 6  // host not supported
  CCLIVE_NET          = 7  // network error
  CCLIVE_FETCH        = 8  // fetch error
  CCLIVE_PARSE        = 9  // parse error
  CCLIVE_INTERNAL     = 10 // internal error (see return code)

=head1 OTHER

=over 4

=item Project page

<http://cclive.googlecode.com/>

=item Front-end

<http://abby.googlecode.com/>

=item Development code:

% git clone git://repo.or.cz/cclive.git

=back

=head1 HISTORY

=over 4

=item * cclive followed the release of clive2

=item * It was originally written in C but later rewritten in C++

=back

=head1 SEE ALSO

C<clive(1)>

=head1 AUTHOR

Toni Gundogdu <legatvs@gmail.com>

Thanks to all those who have contributed to the project
by sending patches, reporting bugs and writing feedback.
You know who you are.

=cut
