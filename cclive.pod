=pod

=head1 NAME

cclive - video extraction utility for the flash dismissing hordes

=head1 SYNOPSIS

cclive [options] [url...]

=head1 DESCRIPTION

cclive is command line video extraction utility for Youtube and other
video-sharing websites. It is similar to clive but with lower requirements.

=head1 OPTIONS

=over 4

=item B<-h, --help>

Print help and exit.

=item B<-v, --version>

Print version and exit.

=item B<--hosts>

Print a list of supported hosts to stdout and exit.

=item B<-q, --quiet>

Turn off all output.

=item B<--debug>

Print libcurl debug messages to stderr.

=item B<-t, --title>  [req. --with-perl]

Causes B<cclive> to use video page title for output video filename.
Ignored if B<cclive> was built --without-perl.

=item B<--cclass=>I<CCLASS>  [req. --with-perl]

Use character-I<class> to filter video page titles. Defaults to "\w".

=item B<-C, --no-cclass>

Negates the use of the character-class.

=item B<-n, --no-extract>

Do not extract any videos.

=item B<-c, --continue>

Continue a partially downloaded video file.

Note that, by default, B<cclive> appends a numeric suffix to the filename
if the file exists already. That is unless:

  * file is already completely retrieved, or:
  * -c or -O is used

=item B<-f, --format=>I<FORMAT>

Extract I<format> of the video. If set to I<best>, B<cclive> will
attempt to download the best video quality. See also L</FORMATS>.

=item B<-O, --output-video=>I<FILE>

Write extracted video to I<file>. Overwrites any already existing
files without a warning.

Do I<not> use this when extracting multiple videos on one run.

=item B<-N, --number-videos>

Add a numeric prefix to the video filenames.

=item B<--filename-format=>I<STRING>

Use I<string> to format the output video filename. If any of the following
specifiers appear anywhere in the I<string>, they will be replaced accordingly:

  %t = page title
  %i = id
  %h = host string
  %s = file suffix

Note that "%t" is replaced only if B<cclive> was built --with-perl and
the B<--title> option was used. Otherwise "%t" equals to "%i".

Example:

  % cclive --filename-format="%i.%s" -n URL

=item B<--emit-csv>

Emit video details in CSV to stdout. Implies B<--no-extract>.
Use of B<--quiet> will be ignored for the CSV.

=item B<--limit-rate=>I<AMOUNT>

Limit download speed to I<amount> (KB/s). Ignored for video page fetch.

=item B<--agent=>I<STRING>

Identify B<cclive> as I<string> to the HTTP servers.

=item B<--proxy=>I<ADDRESS>

Use I<address> for HTTP proxy.

Example:

  --proxy=http://foo:1234

B<cclive> uses the value of the http_proxy environment variable by default
if it is defined.


=item B<--no-proxy>

Do not use proxy, even if http_proxy environment variable is defined.

=item B<--connect-timeout=>I<SECONDS>

Maximum time in I<seconds> allowed for connection to take. Defaults to 30.

=item B<--connect-timeout-socks=>I<SECONDS>

Same as above but tries to workaround the SOCKS proxy bug in cURL. Defaults
to 30.

=item B<--exec=>I<COMMAND>B<;>

Execute I<command> after each file transfer. Optional arguments may be passed
to the command. The expression must be terminated by a semicolon (";").

If the specifier "%i" appears anywhere in I<command> name or the arguments
it is replaced by the pathname of the extracted video file.

Example:

  % cclive --exec="mplayer -really-quiet %i;" -e URL

=item B<--exec=>I<COMMAND>B<+>

Same as B<--exec>, except that "%i" is replaced with as many pathnames
as possible for the invocation of I<command>.

=item B<-e, --exec-run>

Causes B<cclive> to invoke the command defined with B<--exec> when
transfer finishes.

=item B<--stream-exec=>I<COMMAND>

Define the command to be invoked with B<--stream> and B<--stream-pass>.
If a "%i" specifier is used in the I<command>, it will be replaced with
either video file path name (B<--stream>) or parsed video link
(B<--stream-pass>).

=item B<--stream=>I<PERCENT>

Causes B<cclive> to fetch, parse, start download and eventually invoke
the command defined with B<--stream-exec> when the transfer reaches
the percentage defined with this option. See also L</EXAMPLES>.

Note that B<cclive> does nothing to check if there is enough data buffered
before invoking the B<--stream-exec> defined I<command>. If the transfer
rate drops significantly after starting the process and it runs out of data,
B<cclive> does nothing to fix this.

Also note that B<cclive> will not continue to download another file before the
child process exits.

This mode is supported for historical reasons. Consider using
B<--stream-pass> instead.

=item B<-s, --stream-pass>

Otherwise the same as above but B<instead of> starting the download,
B<cclive> passes the parsed video link to the command defined with
B<--stream-exec>. See also L</EXAMPLES>.

The concept of this option is based on a simple C<clive(1)> wrapper
script contributed by Bill Squire.

=item B<--print-fname>

Print output filename on a single line before each file transfer.

=back

=head1 EXAMPLES

=over 4

=item cclive URL

Download video from URL.

=item cclive -f fmt18 URL

Download fmt18/mp4 (Youtube) format of the video from the URL.

=item cclive --exec="mplayer -really-quiet %i;" -e URL

Play the downloaded video with C<mplayer(1)> subsequently.

=item cclive --exec="ffmpeg -i %i -acodec libvorbis %i.ogg;" -e URL

Copy audio from downloaded video to ogg with C<ffmpeg(1)>.

=item cclive --stream-exec="mplayer -really-quiet %i" --stream=20 URL

Start playing the video being downloaded with C<mplayer(1)> when the transfer
reaches 20%.

=item echo 'stream-exec = "mplayer -really-quiet %i"' >> ~/.ccliverc

=item cclive -s URL

Alternate to Adobe Flash. C<vlc(1)> and C<totem(1)> have been reported
to work also.

=back

=head1 FORMATS

B<cclive> downloads "flv" by default from all of the supported websites.

=over 4

=item B<www.youtube.com>

=item B<www.last.fm>

Format: (flv|fmt17|fmt18|fmt22|fmt35)

flv (fmt34) and fmt18 (mp4) are usually available. Others may be
available. At the time of writing this, the following formats
are recognized by both cclive and Youtube:

  hd  .. fmt22 .. mp4  (1280x720)
  hq  .. fmt35 .. flv   (640x380)
  mp4 .. fmt18 .. mp4   (480x360)
  flv .. fmt34 .. flv   (320x180)
  3gp .. fmt17 .. 3gp   (176x144)

Note that you can use either format ID, e.g. fmt22 or hd.

Some of the last.fm videos are actually hosted by Youtube.
cclive can be used to download such videos.

=item B<www.dailymotion.com>

Format: (flv|spak-mini|vp6-hq|vp6-hd|vp6|h264)

The HD and HQ videos may not always be available.

  vp6-hd    .. on2   (1280x720)
  vp6-hq    .. on2     (848x480)
  h264      .. h264    (512x384)
  vp6       .. on2     (320x240)
  flv       .. flv     (320x240)
  spak-mini .. flv       (80x60)

=item B<golem.de>

Format: (flv|high|ipod)

=item B<vimeo.com>

Format: (flv|hd)

HD should be available for the vimeo.com/hd channel videos at least.
Note that "flv" only means the "default flv". Some of the hosted
"default" videos are actually "mp4", not "flv".

For further reading:

  http://vimeo.com/help/hd

=item B<video.google.com>

Format: (flv|mp4)

mp4 may not always be available.

=item B<www.sevenload.com>

=item B<www.break.com>

=item B<www.liveleak.com>

=item B<www.evisor.tv>

=item B<www.clipfish.de>

Format: flv

=back

=head1 FILES

=over 4

=item B<$CCLIVE_HOME|$HOME/.ccliverc>

 agent      = Furball/1.0       # --agent=...
 proxy      = http://foo:1234   # --proxy=...
 limit-rate = 50                # --limit-rate=...
 title                          # --title
 no-extract                     # --no-extract

Most of the program options can be defined in the ~/.ccliverc config file.

=back

=head1 UNICODE

Q: Why am I seeing mangled video filenames?

A: Make sure you have set appropriate locale. For example (in csh/urxvt terms):

  % setenv LANG en_US.UTF-8
  % urxvt &

You can get a list of supported locales on your typical Unix-like system with:

  % locale -a

=head1 DEBUGGING

Some tips that we have found useful:

  % cclive --debug URL

Causes B<libcurl> to be verbose.

  % cclive -n URL

Simulates video extraction only.

=head1 BUGS

Sure to be some.

Please report them:
  <http://code.google.com/p/cclive/issues/>

=head1 EXIT STATUS

cclive exits 0 on success, and E<gt>0 if an error occurs.

  CCLIVE_OK           = 0
  CCLIVE_OPT          = 1  // cmdline option parsing error
  CCLIVE_OPTARG       = 2  // cmdline option arg error
  CCLIVE_CURLINIT     = 3  // curl init error
  CCLIVE_NOTHINGTODO  = 4  // file already retrieved
  CCLIVE_SYSTEM       = 5  // system call failed
  CCLIVE_NOSUPPORT    = 6  // host not supported
  CCLIVE_NET          = 7  // network error
  CCLIVE_FETCH        = 8  // fetch error
  CCLIVE_PARSE        = 9  // parse error
  CCLIVE_INTERNAL     = 10 // internal error (see return code)

=head1 OTHER

Project page:

  <http://cclive.googlecode.com/>

Front-end:

  <http://abby.googlecode.com/>

Development code:

  % git clone git://repo.or.cz/cclive.git

=head1 HISTORY

=over 4

=item cclive appeared following the release of clive2

clive2 introduced quite a few prerequisites and is written in Perl.

=item It was originally written in C but was later rewritten in C++

B<cclive> aims to keep the prerequisites low for both hardware and
software. Its features are few and essential.

=back

=head1 SEE ALSO

C<clive(1)>

=head1 AUTHOR

Toni Gundogdu <legatvs@gmail.com>

Thanks to all those who have contributed to the project
by sending patches, reporting bugs and writing feedback.
You know who you are.

=cut
