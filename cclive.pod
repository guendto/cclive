=pod

=head1 NAME

cclive - lightweight video extraction tool

=head1 SYNOPSIS

cclive [options] [url...]

=head1 DESCRIPTION

cclive is a lightweight commandline video extraction tool for Youtube
and similar video Websites. It is a rewrite of the clive software in
C++ with a smaller system footprint and fewer dependencies. It is
primarily a "video download tool", but can be used with video player
software like "mplayer" for viewing streamed videos in place of the
Adobe flash player. 

cclive is designed to be used as a workaround tool for websites that
require the Adobe flash player plugin for viewing the video content.

=head1 OPTIONS

=over 4

=item B<-h, --help>

Print help and exit.

=item B<-v, --version>

Print version and exit.

=item B<--hosts>

Print supported hosts and exit.

=item B<--background>

Go to background immediately after startup. Output will be written to
I<cclive.log> unless B<--logfile> is used.

=back

B<Output>

=over 4

=item B<-q, --quiet>

Turn off all output.

=item B<--debug>

Turn on libcurl verbose mode.

=item B<--emit-csv>

Print video details in CSV format and exit. Prepends "csv:" for each video.
Ignores C<--quiet> for CSV.

=item B<--print-fname>

Print filename on a separate line before each download starts.
Prepends "file:" for each video.

=item B<-o, --logfile>=I<file>

Write output to I<file> while in the background. Defaults to I<cclive.log>.

=item B<-i, --logfile-interval>=I<seconds>

Update logfile every I<seconds> while in the background. Defines how
frequently the download progress information is written to the log.
Defaults to I<10>.

=back

B<HTTP>

=over 4

=item B<--agent>=I<agentstring>

Identify cclive as I<agentstring> to the HTTP servers.

=item B<--proxy>=I<proxyhost[:port]>

Use the specified HTTP proxy. Overrides http_proxy definition.

=item B<--no-proxy>

Do not use HTTP proxy, even if http_proxy environment variable
is defined.

=item B<--connect-timeout>=I<seconds>

Maximum time in I<seconds> allowed for connection to take.
Defaults to 30.

=item B<--connect-timeout-socks>=I<seconds>

Otherwise identical to the above option but works around the known
"SOCKS proxy connect timeout" bug in libcurl. Defaults to 30.

=item B<-t, --retry>=I<number>

I<number> of retries. Specify 0 for infinite. Default is 5 times, with
the exception of errors such as "forbidden" (403) or "not found" (404).

=item B<--retry-wait>=I<seconds>

Wait 1..seconds between the retries. Default is 1.

=back

B<Download>

=over 4

=item B<-O, --output-video>=I<file>

Write the video to I<file>. Overrides C<--filename-format>.

=item B<-c, --continue>

Resume a partially downloaded video file. Affects the file transfers
prior to this invocation of cclive. You do not need to specify this
option if you want the current invocation of cclive to retry downloading
should the connection be lost midway through. This is the default behaviour.

=item B<-W, --overwrite>

Overwrite the existing file. Negates C<--continue>.

=item B<-n, --no-extract>

Do not actually extract any videos, simulate only. cclive parses,
verifies the video link and exits without downloading it.

=item B<l, --limit-rate>=I<amount>

Limit download speed to I<amount> (KB/s). Ignored for video page
fetches.

=item B<-f, --format>=I<formatid>

Download I<formatid> of the video. If set to C<best>, cclive
attempts to download the best quality of the video. See also
L</FORMATS>.

=item B<-M, --format-map>=I<hostid:formatid|hostid:formatid...>

Like C<--format> but allows specifying the format for multiple hosts.
Note that C<--format> setting overrides this setting. See also L</EXAMPLES>.

=back

B<Filename formatting>

=over 4

=item B<-N, --number-videos>

Prepend a numeric prefix (e.g. "001_") to the output filenames.

=item B<-r, --regexp>=I<regexp>

Regular expression used to clean up video titles before they are used for
output filenames. Supports (and mimics) Perl's /g (global, find all) and /i
(case-insensitive). See also L</EXAMPLES>.

=item B<-S, --substitute>=I<regexps>

Mimics Perl's s/old/new/(gi) substitution. This option can be used to
replace occurences in output filenames. Supports /g (global, find all
occurences) and /i (case-insensitive).

Use of multiple regular expressions is also supported. You can separate
each with with a whitespace. The number of regular expressions is
currently unlimited.

See also L</EXAMPLES>.

=item B<-F, --filename-format>=I<formatstring>

Use the specified I<formatstring> to format the output filenames.
cclive defaults to "%h_%i.%s". Any of the following specifiers
appearing in the format string will be replaced accordingly:

  %t = video title
  %i = video id
  %h = website id
  %s = file suffix

See also L</EXAMPLES>.

=back

B<Subsequent>

=over 4

=item B<--exec>=I<expression>B<;>

Execute I<expression> after each file transfer. Optional arguments
may be passed to the command. The expression must be terminated by
a semicolon (";").

If the specifier "%i" appears anywhere in I<expression> it will be
replaced with the pathname of the extracted video file.

=item B<--exec>=I<expression>B<+>

Same as C<--exec>, except that "%i" will be replaced with as many
pathnames as possible for the invocation of I<expression>.

=item B<-e, --exec-run>

Invokes the expression specified with C<--exec> when download finishes.

=back

B<Streaming>

=over 4

=item B<--stream-exec>=I<expression>

Expression to be invoked with C<--stream> and C<--stream-pass>.

If a "%i" specifier is used in the I<expression>, it will be replaced
with either the video pathname (C<--stream>) or the parsed video link
(C<--stream-pass>).

=item B<-s, --stream-pass>

In addition to the "%i" specifier, if the specifier "%f" appears
anywhere in C<--stream-exec> I<expression> it will be replaced
with the pathname of the extracted video file.

See also L</EXAMPLES>. This feature is based on clive wrapper script
contributed by Bill Squire.

=back

=head1 EXAMPLES

=over 4

=item cclive URL

Download video from URL.

=item cclive -f fmt18 Youtube_URL

Download fmt18 (mp4) format of the video.

=item cclive -F "%t.%s" URL

Use video titles in filenames. cclive uses "%i_%h.%s" by default.
Note that cclive will apply --regexp pattern, if any, to the title
before using it. For the supported specifiers, see the
C<--filename-format> description.

=item cclive -F "%t.%s" -r "/(\w+)/" URL

Match a string of "word" character from the video title and use it in the
filename replacing the "%t" specifier. cclive replaces the "%s" specifier
with appropriate file suffix string (e.g. "flv").

=item cclive -F "%t.%s" -r "/(\w|\s)/g" URL

Match all "word" and "whitespace" characters, and use them in the filename
replacing the "%t". Note the use of "/g" (global, find all).

=item cclive -S "s/old/new/i" URL

Replace all occurences of "old" with "new" in the output filename.
Note the use of "i" (case-insensitive).

=item cclive -S "s/old/new/i s/:/_/g" URL

Same but replaces also ':' with '_'. Note the use of "g" (global,
find all) and the use of a whitespace to separate the used regular
expressions.

=item cclive --exec="mplayer -really-quiet %i;" -e URL

Play the downloaded video with C<mplayer(1)> when download finishes.

=item cclive --exec="ffmpeg -i %i -acodec libvorbis %i.ogg;" -e URL

Similar but re-encode audio from the downloaded video to a vorbis
audio file, using C<ffmpeg(1)>.

=item echo 'stream-exec = "mplayer -really-quiet %i"' E<gt>E<gt> ~/.ccliverc

Adds C<--stream-exec> to the config file for permanent use. Saves typing
as shown below:

=item cclive -s URL

Stream and play the video from the URL using C<mplayer(1)>, as defined with
C<--stream-exec> above.

Note that cclive itself does not stream or play the media, it only parses
and passes the video link to C<mplayer(1)>.

You can use the above as an alternative to the Adobe flash player if you
cannot view the streamed videos otherwise, or if you want to play them in
an external player while streaming.

The above should work with other player software, like C<vlc(1)> and
C<totem(1)>.

=item cclive -s URL --stream-exec="wget %i -O %f"

Use C<wget(1)> to download the video. Note the use of the "%f" specifier
which is unique to C<--pass-stream, -s>.

=item cat E<gt> url.lst

  http://en.sevenload.com/videos/IUL3gda-Funny-Football-Clips
  http://youtube.com/watch?v=3HD220e0bx4
  http://break.com/index/beach-tackle-whip-lash.html
  http://www.liveleak.com/view?i=704_1228511265

Create a file that will contain multiple URLs, each separated with a newline.
We can use the created file with cclive as shown below:

=item cclive E<lt> url.lst

Or:

=item cat url.lst | cclive

This may save you some typing, as you would normally have to type each
URL to the command line as an argument.

=item echo 'format-map = "youtube:mp4|dailymotion:h264-hq"' E<gt>E<gt> ~/.ccliverc

Save C<--format-map> to config file for permanent use.

=item cclive Youtube_URL Dailymotion_URL

Causes cclive to download mp4 of the Youtube video and h264-hq of
the Dailymotion video. Note that the use of -f (or C<--format>)
overrides this setting.

=back

=head1 FORMATS

Note that cclive (0.6.0+) depends on libquvi for parsing
video links. You can get a more complete list of the
websites (hosts) and the supported formats with the
C<--hosts> option.

cclive defaults to download "flv", unless C<--format>
is used, or if the requested format cannot be found.

The quality of the "default flv" can vary. Some hosts may use
different "default resolution" and "default quality" for their
videos.

Same goes for the video details listed below. The resolutions
may vary, depending on the hosts settings, so the list below
may be inaccurate at times.

=over 4

=item youtube.com

Format: flv|fmt17|fmt18|fmt22|fmt35

cclive defaults to to whatever Youtube defaults to at the
time. This is usually the fmt34 (see below).

Also, do not be surprised if the quality is not what you
expected, the good folks at Youtube like to keep things
interesting (for those who care).

 FormatID  Alias    Suffix  Resolution
 fmt22     hd       mp4     1280x720
 fmt35     hq       flv      640x380
 fmt18     mp4      mp4      480x360
 fmt34     flv      flv      320x180 [default] (resolution may vary)
 fmt17     3gp      3gp      176x144

You can use either, the "alias" (e.g. "hd") or the "format id"
(e.g. "fmt22"), with --format. The aliases are supported for
historical reasons.

cclive can also download videos that last.fm lists as Youtube
hosted videos.

=item dailymotion.com

Format: flv|spark-mini|h264|h264-hq|h264-hd

The HD and HQ videos may not always be available.

  FormatID      Suffix  Resolution
  h264-hd       mp4     1280x720
  h264-hq       mp4      848x480
  h264          mp4      512x384
  flv           flv      320x240 [default]
  spark-mini    flv        80x60

=item spiegel.de

Format: vp6_(576|928)|h264_1400

  FormatID   Suffix  Resolution
  h264_1400  mp4     996x560
  vp6_928    flv     996x560
  vp6_576    flv     560x315
  flv        flv     180x100 [default]

=item golem.de

Format: flv|high|ipod

=item video.google.com

Format: flv|mp4

mp4 may not always be available.

=item spyfilms.com

Format: flv|hd

=item All other supported websites

Format: flv

Check also the C<--hosts>. libquvi is likely to get
updated more frequently than cclive, so the output of
this option may change.

=back

=head1 FILES

=over 4

=item B<$CCLIVE_HOME|$HOME/.ccliverc>

 agent      = Furball/1.0       # --agent=...
 proxy      = http://foo:1234   # --proxy=...
 limit-rate = 50                # --limit-rate=...
 no-extract                     # --no-extract

Most of the program options can be specified in the ~/.ccliverc
config file.

=back

=head1 UNICODE

If you are seeing mangled characters in output filenames (titles), this may
be because of an invalid locale setting or a sign of terminal incapable of
displaying unicode characters. On a typical Unix-like system, try running
"locale -a" to get a list of the available locale names.

For example, in bash and urxvt terms:

  % LANG=en_US.UTF8 urxvt&
  % cclive ... # in new terminal

cclive (libquvi) converts the characters to unicode if the video HTML
specifies the charset meta tag. Otherwise the characters are copied as
they are.

If you are missing the unicode characters when using C<--regexp> and
C<--filename-format>, make sure the regular expression includes "\pL".
For example:

  % cclive -F "%t.%s" -r "/(\w|\s|\pL)/g" URL

"In UTF-8 mode, characters with values greater than 128 never match \d,
\s, or \w, and always match \D, \S, and \W. This is true even when Uni-
code character property support is available. These sequences retain
their original meanings from before UTF-8 support was available, mainly
for efficiency reasons. Note that this also affects \b, because it is
defined in terms of \w and \W." -- man pcrepattern

=head1 BUGS

Sure to be some. Please report them.

Note that if the error message contains "libquvi:", that means
the error occurred in libquvi. Please file the libquvi related
issues at:

  <http://quvi.googlecode.com/>

And everything else at:

  <http://cclive.googlecode.com/>

Please search the tracker for both open and closed issues
before you file a new one. The issue may have already been
reported, addressed or closed. Thanks.

=head1 DEBUGGING

Useful options for debugging cclive.

=over 4

=item cclive --debug URL

Spew out libcurl verbose messages.

=item cclive -n URL

Simulate only; cclive will parse and verify the video link without
downloading it.

=back

=head1 EXIT STATUS

cclive exits 0 on success, and E<gt>0 if an error occurs.

  CCLIVE_OK           = 0
  CCLIVE_OPT          = 1  // cmdline option parsing error
  CCLIVE_OPTARG       = 2  // cmdline option arg error
  CCLIVE_CURLINIT     = 3  // curl init error (unused since 0.6.0+)
  CCLIVE_NOTHINGTODO  = 4  // file already retrieved
  CCLIVE_SYSTEM       = 5  // system call failed
  CCLIVE_NOSUPPORT    = 6  // host not supported
  CCLIVE_NET          = 7  // network error
  CCLIVE_FETCH        = 8  // fetch error
  CCLIVE_PARSE        = 9  // parse error
  CCLIVE_INTERNAL     = 10 // internal error (see return code)

=head1 OTHER

=over 4

=item Project page:

<http://cclive.googlecode.com/>

=item FAQ:

<http://code.google.com/p/cclive/wiki/FAQ>

=item Front-end:

<http://abby.googlecode.com/>

=item Development code:

% git clone git://repo.or.cz/cclive.git

=back

=head1 SEE ALSO

C<clive(1)>

=head1 AUTHOR

Toni Gundogdu <legatvs@gmail.com>

Thanks to all those who have contributed to the project
by sending patches, reporting bugs and writing feedback.
You know who you are.

=cut
