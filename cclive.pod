=pod

=head1 NAME

cclive - video extraction utility for the flash dismissing hordes

=head1 SYNOPSIS

cclive [options] [url...]

=head1 DESCRIPTION

cclive is command line video extraction utility for Youtube and other
video-sharing websites. It is similar to clive but with lower requirements.

=head1 OPTIONS

=over 4

=item B<-h, --help>

Print help and exit.

=item B<-v, --version>

Print version and exit.

=item B<--hosts>

Print a list of supported hosts to stdout and exit.

=item B<-q, --quiet>

Turn off all output.

=item B<--debug>

Print libcurl debug messages to stderr.

=item B<-t, --title>  [req. --with-perl]

Causes B<cclive> to use video page title for output video filename.
Ignored if cclive was built --without-perl.

=item B<--cclass=>I<CCLASS>  [req. --with-perl]

Use character-I<class> to filter video page titles. Defaults to "\w".
Refer to the Perl regular expressions (character classes) for more on
this.

=item B<-C, --no-cclass>

Negates the use of the character-class.

=item B<-n, --no-extract>

Do not extract any videos.

=item B<-c, --continue>

Resume a partially downloaded video file. May not work with some of the HTTP
servers. Be sure to read the L</FORMATS> section.

=item B<-f, --format=>I<FORMAT>

Extract I<format> of the video. If I<format> is set to I<best>, cclive
will attempt to extract the best video quality.

Note that the I<format> is strictly host specific. See the L</FORMATS>
section for more on this.

=item B<-O, --output-video=>I<FILE>

Write extracted video to I<file>. Causes B<cclive> to overwrite the existing
file unless the file is fully retrieved already.

Do I<not> use this when extracting multiple videos on one run.

=item B<-N, --number-videos>

Add a numeric prefix to the video filenames.

=item B<--filename-format=>I<STRING>

Use I<string> to format the output video filename. If any of the following
specifiers appear anywhere in the I<string>, they will be replaced accordingly:

  %t = page title
  %i = id
  %h = host string
  %s = file suffix

Note that "%t" is replaced only if B<cclive> was built --with-perl and
the B<--title> option was used. Otherwise "%t" equals to "%i".

Example:

  % cclive --filename-format="%i.%s" -n URL

=item B<--emit-csv>

Emit video details in CSV to stdout. Implies B<--no-extract>.
Ignores B<--quiet>.

=item B<--limit-rate=>I<AMOUNT>

Limit download speed to I<amount> (KB/s). Does not limit video page fetches.

=item B<--agent=>I<STRING>

Identify B<cclive> as I<string> to the HTTP servers.

=item B<--proxy=>I<ADDRESS>

Use I<address> for HTTP proxy.

Example:

  --proxy=http://foo:1234

B<cclive> uses the value of the http_proxy environment variable by default
if it is defined.


=item B<--no-proxy>

Do not use proxy, even if http_proxy environment variable is defined.

=item B<--connect-timeout=>I<SECONDS>

Maximum time in I<seconds> allowed for connection to take. Defaults to 30.

=item B<--connect-timeout-socks=>I<SECONDS>

Same as above but tries to workaround the SOCKS proxy bug in cURL. Defaults
to 30.

=item B<--exec=>I<COMMAND>B<;>

Execute I<command> after each file transfer. Optional arguments may be passed
to the command. The expression must be terminated by a semicolon (";").

If the specifier "%i" appears anywhere in I<command> name or the arguments
it is replaced by the pathname of the extracted video file.

Example:

  % cclive --exec="mplayer -really-quiet %i;" -e URL

=item B<--exec=>I<COMMAND>B<+>

Same as B<--exec>, except that "%i" is replaced with as many pathnames
as possible for the invocation of I<command>.

=item B<-e, --exec-run>

Causes cclive to invoke the command defined with B<--exec> when
transfer finishes.

=item B<--stream-exec=>I<COMMAND>

Execute I<command> when file transfer progress reaches I<percent> as defined
with the B<--stream> option. If a "%i" specifier is used in the I<command>
expression, it will be replaced with video pathname.

B<cclive> forks the I<command> and continues with the transfer. Note that
B<cclive> will not continue to download another file before the child process
terminates.

Some players and formats may not work properly with this feature.
C<mplayer(1)> is known to work properly with most flv videos.

=item B<--stream=>I<PERCENT>

Execute the I<command> defined with the B<--stream-exec> option when the
file transfer progress reaches I<percent>.

Example:

  % cclive --stream-exec="mplayer -really-quiet %i" --stream=20 URL

Note that B<cclive> does nothing to check if there is enough data buffered
before forking the stream process. If the transfer rate drops significantly
after starting the process and it runs out of data, B<cclive> does nothing
to fix this.

=item B<--print-fname>

Print output filename on a dedicated line before each file transfer.

=back

=head1 EXAMPLES

Typical use:

  % cclive URL

Download fmt18/mp4 (Youtube) format of the video from the URL:

  % cclive -f fmt18 URL

Play the downloaded video with C<mplayer(1)> subsequently:

  % cclive --exec="mplayer -really-quiet %i;" -e URL

Extract audio to an mp3 file from the downloaded video with C<ffmpeg(1)>:

  % cclive --exec="ffmpeg -i %i %i.mp3;" -e URL

Start playing the video being downloaded with C<mplayer(1)> when the transfer
reaches 20%:

  % cclive --stream-exec="mplayer -really-quiet %i" --stream=20 URL

=head1 FORMATS

flv format which is typically ~320x240 resolution video on all supported
websites, is downloaded by default if --format option is not defined.

Some of the supported websites support additional formats which are
listed below with any known details. Note that --hosts option lists
available formats as well as the supported hosts.

=over 4

=item B<www.youtube.com>

=item B<www.last.fm>

Format: (flv|fmt17|fmt18|fmt22|fmt35)

flv (fmt34) and fmt18 (mp4) are usually available. Others may be
available. At the time of writing this, the following formats
are recognized by both cclive and Youtube:

  hd  .. fmt22 .. mp4  (1280x720)
  hq  .. fmt35 .. flv   (640x380)
  mp4 .. fmt18 .. mp4   (480x360)
  flv .. fmt34 .. flv   (320x180)
  3gp .. fmt17 .. 3gp   (176x144)

Note that you can use either format ID, e.g. fmt22 or hd.

Some of the last.fm videos are actually hosted by Youtube.
cclive can be used to download such videos.

=item B<www.dailymotion.com>

Format: (flv|spak-mini|vp6-hq|vp6-hd|vp6|h264)

The HD and HQ videos may not always be available.

  vp6-hd    .. on2   (1280x720)
  vp6-hq    .. on2     (848x480)
  h264      .. h264    (512x384)
  vp6       .. on2     (320x240)
  flv       .. flv     (320x240)
  spak-mini .. flv       (80x60)

=item B<golem.de>

Format: (flv|high|ipod)

=item B<vimeo.com>

Format: (flv|hd)

HD should be available for the vimeo.com/hd channel videos at least.
Note that "flv" only means the "default flv". Some of the hosted
"default" videos are actually "mp4", not "flv".

For further reading:

  http://vimeo.com/help/hd

=item B<video.google.com>

Format: (flv|mp4)

mp4 may not always be available.

=item B<www.sevenload.com>

=item B<www.break.com>

=item B<www.liveleak.com>

=item B<www.evisor.tv>

Format: flv

=back

=head1 FILES

=over 4

=item B<$CCLIVE_HOME|$HOME/.ccliverc>

 agent      = Furball/1.0       # --agent=...
 proxy      = http://foo:1234   # --proxy=...
 limit-rate = 50                # --limit-rate=...
 title                          # --title
 no-extract                     # --no-extract

Most of the program options can be defined in the ~/.ccliverc config file.

=back

=head1 UNICODE

Q: Why am I seeing mangled video filenames?

A: Make sure you have set appropriate locale. For example (in csh/urxvt terms):
  % setenv LANG en_US.UTF-8
  % urxvt &

You can get a list of supported locales on your typical Unix-like system with:
  % locale -a

=head1 DEBUGGING

Some tips that we have found useful:

  % cclive --debug URL

Causes I<libcurl> to dump log messages to stderr. This data includes HTTP
headers etc.

  % cclive -n URL

Causes cclive to do the usual fetch, parse and verify video link
approach but exits after that without downloading the video file.

=head1 BUGS

Sure to be some.

Please report them to the issue tracker at:
  <http://code.google.com/p/cclive/issues/>

=head1 EXIT STATUS

cclive exits 0 on success, and >0 if an error occurs.

  CCLIVE_OK           = 0
  CCLIVE_OPT          = 1  // cmdline option parsing error
  CCLIVE_OPTARG       = 2  // cmdline option arg error
  CCLIVE_CURLINIT     = 3  // curl init error
  CCLIVE_NOTHINGTODO  = 4  // file already retrieved
  CCLIVE_SYSTEM       = 5  // system call failed
  CCLIVE_NOSUPPORT    = 6  // host not supported
  CCLIVE_NET          = 7  // network error
  CCLIVE_FETCH        = 8  // fetch error
  CCLIVE_PARSE        = 9  // parse error
  CCLIVE_INTERNAL     = 10 // internal error (see return code)

=head1 OTHER

Project page:

  http://cclive.googlecode.com/

Front-end:

  http://abby.googlecode.com/

Development code:

  % git clone git://repo.or.cz/cclive.git

=head1 HISTORY

cclive appeared following the release of clive2. It was
originally written in C but later rewritten in C++.

=head1 SEE ALSO

C<clive(1)>

=head1 AUTHOR

Toni Gundogdu <legatvs@gmail.com>

Thanks to all those who have contributed to the project
by sending patches, reporting bugs and writing feedback.
You know who you are.

=cut
