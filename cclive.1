.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "cclive 1"
.TH cclive 1 "2009-08-07" "0.5.0" "cclive manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cclive \- lightweight video extraction tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
cclive [options] [url...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
cclive is lightweight command line video extraction tool for Youtube and
other similar video-sharing websites. It resembles clive in many aspects
but has lower requirements.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print help and exit.
.IP "\fB\-v, \-\-version\fR" 4
.IX Item "-v, --version"
Print version and exit.
.IP "\fB\-\-hosts\fR" 4
.IX Item "--hosts"
Print a list of supported hosts to stdout and exit.
.PP
\&\fBOutput\fR
.IP "\fB\-q, \-\-quiet\fR" 4
.IX Item "-q, --quiet"
Turn off all output.
.IP "\fB\-\-debug\fR" 4
.IX Item "--debug"
Print libcurl debug messages to stderr.
.IP "\fB\-\-emit\-csv\fR" 4
.IX Item "--emit-csv"
Evit video details in \s-1CSV\s0 to stdout. Implies \fB\-\-no\-extract\fR.
\&\fB\-\-quiet\fR will be ignored for \s-1CSV\s0 output.
.IP "\fB\-\-print\-fname\fR" 4
.IX Item "--print-fname"
Print output filename on a single line before each file transfer.
.PP
\&\fB\s-1HTTP\s0\fR
.IP "\fB\-\-agent\fR=\fIstring\fR" 4
.IX Item "--agent=string"
Identify cclive as \fIstring\fR to the \s-1HTTP\s0 servers.
.IP "\fB\-\-proxy\fR=\fIproxyhost[:port]\fR" 4
.IX Item "--proxy=proxyhost[:port]"
Use the specified \s-1HTTP\s0 proxy. Overrides http_proxy definition.
.IP "\fB\-\-no\-proxy\fR" 4
.IX Item "--no-proxy"
Do not use \s-1HTTP\s0 proxy, even if http_proxy environment variable is defined.
.IP "\fB\-\-connect\-timeout\fR=\fIseconds\fR" 4
.IX Item "--connect-timeout=seconds"
Maximum time in \fIseconds\fR allowed for connection to take. Defaults to 30.
.IP "\fB\-\-connect\-timeout\-socks\fR=\fIseconds\fR" 4
.IX Item "--connect-timeout-socks=seconds"
Identical to the above but tries to work around the (known) \s-1SOCKS\s0 proxy bug
in libcurl. Defaults to 30.
.PP
\&\fBDownload\fR
.IP "\fB\-n, \-\-no\-extract\fR" 4
.IX Item "-n, --no-extract"
Do not actually extract any videos, simulate only.
.IP "\fB\-c, \-\-continue\fR" 4
.IX Item "-c, --continue"
Continue a partially downloaded video file.
.Sp
cclive appends a numeric suffix (e.g. \*(L".1\*(R") to the output filename
if the file exists already \*(-- unless:
.Sp
.Vb 3
\&  * file is already completely retrieved
\&Or:
\&  * either \-\-continue or \-\-output\-video is used
.Ve
.IP "\fBl, \-\-limit\-rate\fR=\fIamount\fR" 4
.IX Item "l, --limit-rate=amount"
Limit download speed to \fIamount\fR (KB/s). Page fetches will
ignore this setting.
.IP "\fB\-O, \-\-output\-video\fR=\fIfile\fR" 4
.IX Item "-O, --output-video=file"
Write the downloaded video \fIfile\fR. Note that this causes cclive
overwrite existing file without warning.
.IP "\fB\-f, \-\-format\fR=\fIformat\fR" 4
.IX Item "-f, --format=format"
Download the \fIformat\fR of the video. If set to \fIbest\fR, cclive
attempts to download the best quality of the video.
.Sp
See also \*(L"\s-1FORMATS\s0\*(R".
.PP
\&\fBSubsequent\fR
.IP "\fB\-\-exec\fR=\fIexpression\fR\fB;\fR" 4
.IX Item "--exec=expression;"
Execute \fIexpression\fR after each file transfer. Optional arguments may be passed
to the command. The expression must be terminated by a semicolon (\*(L";\*(R").
.Sp
If the specifier \*(L"%i\*(R" appears anywhere in \fIexpression\fR name or the arguments
it is replaced by the pathname of the extracted video file.
.Sp
Example:
.Sp
.Vb 1
\&  % cclive \-\-exec="mplayer \-really\-quiet %i;" \-e URL
.Ve
.IP "\fB\-\-exec\fR=\fIexpression\fR\fB+\fR" 4
.IX Item "--exec=expression+"
Same as \fB\-\-exec\fR, except that \*(L"%i\*(R" is replaced with as many pathnames
as possible for the invocation of \fIexpression\fR.
.IP "\fB\-e, \-\-exec\-run\fR" 4
.IX Item "-e, --exec-run"
Causes cclive to invoke the command defined with \fB\-\-exec\fR when download
finishes.
.PP
\&\fBStreaming\fR
.IP "\fB\-\-stream\-exec\fR=\fIexpression\fR" 4
.IX Item "--stream-exec=expression"
Define the command to be invoked with \fB\-\-stream\fR and \fB\-\-stream\-pass\fR.
.Sp
If a \*(L"%i\*(R" specifier is used in the \fIexpression\fR, it will be replaced with
either a video file path name (\fB\-\-stream\fR) or a parsed video link
(\fB\-\-stream\-pass\fR).
.IP "\fB\-s, \-\-stream\-pass\fR" 4
.IX Item "-s, --stream-pass"
Otherwise the same as \fB\-\-stream\fR but instead of starting the download,
cclive passes the parsed video link to the command defined with
\&\fB\-\-stream\-exec\fR. See also \*(L"\s-1EXAMPLES\s0\*(R".
.Sp
This option was inspired by a \f(CWclive(1)\fR wrapper script contributed
by Bill Squire.
.IP "\fB\-\-stream\fR=\fIpercentage\fR" 4
.IX Item "--stream=percentage"
Causes cclive to fetch, parse, start download and eventually invoke
the command defined with \fB\-\-stream\-exec\fR when the transfer reaches
the \fIpercentage\fR defined with this option. See also \*(L"\s-1EXAMPLES\s0\*(R".
.Sp
Note that cclive does nothing to check if there is enough data buffered
before invoking the \fB\-\-stream\-exec\fR defined \fIexpression\fR. If the transfer
rate drops significantly after starting the process and it runs out of data,
cclive does nothing to fix this.
.Sp
Also note that cclive will not continue to download another file before the
child process exits.
.Sp
This mode is supported for historical reasons. Consider using
\&\fB\-\-stream\-pass\fR instead.
.PP
\&\fBFilename formatting\fR
.IP "\fB\-N, \-\-number\-videos\fR" 4
.IX Item "-N, --number-videos"
Prepend a numeric prefix to the output filenames.
.IP "\fB\-r, \-\-regexp\fR=\fIexpression\fR" 4
.IX Item "-r, --regexp=expression"
A regular expression to filter the video titles before using them
for output filenames. Quietly ignored if cclive was built without
pcre support.
.IP "\fB\-g, \-\-find\-all\fR" 4
.IX Item "-g, --find-all"
Use repeated matching to find all occurences, like Perl's /g option.
.IP "\fB\-F, \-\-filename\-format\fR=\fIformatstring\fR" 4
.IX Item "-F, --filename-format=formatstring"
Use the specified \fIformatstring\fR for formatting the output filenames.
cclive defaults to \*(L"%t.%s\*(R". Any supported specifiers (below) appearing
in the \fIformatstring\fR will be replaced accordingly:
.Sp
.Vb 4
\&  %t = video title
\&  %i = video id
\&  %h = website domain
\&  %s = file suffix
.Ve
.Sp
Example:
.Sp
.Vb 1
\&  % cclive \-\-filename\-format="%i.%s" URL
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "cclive \s-1URL\s0" 4
.IX Item "cclive URL"
Download video from \s-1URL\s0.
.IP "cclive \-f fmt18 Youtube_URL" 4
.IX Item "cclive -f fmt18 Youtube_URL"
Download fmt18 (mp4) format of the video.
.ie n .IP "cclive \-\-exec=""mplayer \-really\-quiet %i;"" \-e \s-1URL\s0" 4
.el .IP "cclive \-\-exec=``mplayer \-really\-quiet \f(CW%i\fR;'' \-e \s-1URL\s0" 4
.IX Item "cclive --exec=mplayer -really-quiet %i; -e URL"
Play the downloaded video with \f(CWmplayer(1)\fR subsequently.
.ie n .IP "cclive \-\-exec=""ffmpeg \-i %i\fR \-acodec libvorbis \f(CW%i.ogg;"" \-e \s-1URL\s0" 4
.el .IP "cclive \-\-exec=``ffmpeg \-i \f(CW%i\fR \-acodec libvorbis \f(CW%i\fR.ogg;'' \-e \s-1URL\s0" 4
.IX Item "cclive --exec=ffmpeg -i %i -acodec libvorbis %i.ogg; -e URL"
Copy audio from downloaded video to ogg with \f(CWffmpeg(1)\fR.
.ie n .IP "cclive \-\-stream\-exec=""mplayer \-really\-quiet %i"" \-\-stream=20 \s-1URL\s0" 4
.el .IP "cclive \-\-stream\-exec=``mplayer \-really\-quiet \f(CW%i\fR'' \-\-stream=20 \s-1URL\s0" 4
.IX Item "cclive --stream-exec=mplayer -really-quiet %i --stream=20 URL"
Start playing the video being downloaded with \f(CWmplayer(1)\fR when the transfer
reaches 20%.
.ie n .IP "echo 'stream\-exec = ""mplayer \-really\-quiet %i""' >> ~/.ccliverc" 4
.el .IP "echo 'stream\-exec = ``mplayer \-really\-quiet \f(CW%i\fR''' >> ~/.ccliverc" 4
.IX Item "echo 'stream-exec = mplayer -really-quiet %i' >> ~/.ccliverc"
.PD 0
.IP "cclive \-s \s-1URL\s0" 4
.IX Item "cclive -s URL"
.PD
Alternate to streaming with Adobe Flash. \f(CWvlc(1)\fR and \f(CWtotem(1)\fR have been
reported to work also.
.ie n .IP "cclive \-r ""(\ew+)"" \s-1URL\s0" 4
.el .IP "cclive \-r ``(\ew+)'' \s-1URL\s0" 4
.IX Item "cclive -r (w+) URL"
Grab the first \*(L"word\*(R" character from video title for output filename.
.ie n .IP "cclive \-gr ""(\ew|\es)"" \s-1URL\s0" 4
.el .IP "cclive \-gr ``(\ew|\es)'' \s-1URL\s0" 4
.IX Item "cclive -gr (w|s) URL"
Grab all \*(L"word\*(R" and \*(L"whitespace\*(R" characters from the video title and
use them for the output filename.
.SH "FORMATS"
.IX Header "FORMATS"
\&\*(L"flv\*(R" is downloaded by default if \fB\-\-format\fR is not defined. Some
websites support several video formats. Details listed below.
.IP "youtube.com" 4
.IX Item "youtube.com"
.PD 0
.IP "last.fm" 4
.IX Item "last.fm"
.PD
Format: (flv|fmt17|fmt18|fmt22|fmt35)
.Sp
flv (fmt34) and fmt18 (mp4) are usually available. Others may be
available. At the time of writing this, the following formats
are recognized by both cclive and Youtube:
.Sp
.Vb 5
\&  hd  .. fmt22 .. mp4  (1280x720)
\&  hq  .. fmt35 .. flv   (640x380)
\&  mp4 .. fmt18 .. mp4   (480x360)
\&  flv .. fmt34 .. flv   (320x180)
\&  3gp .. fmt17 .. 3gp   (176x144)
.Ve
.Sp
Note that you can use either format \s-1ID\s0, e.g. fmt22 or hd.
.Sp
Some of the last.fm videos are actually hosted by Youtube.
cclive can be used to download such videos.
.IP "dailymotion.com" 4
.IX Item "dailymotion.com"
Format: (flv|spark\-mini|vp6\-hq|vp6\-hd|vp6|h264)
.Sp
The \s-1HD\s0 and \s-1HQ\s0 videos may not always be available.
.Sp
.Vb 6
\&  vp6\-hd    .. on2   (1280x720)
\&  vp6\-hq    .. on2     (848x480)
\&  h264      .. h264    (512x384)
\&  vp6       .. on2     (320x240)
\&  flv       .. flv     (320x240)
\&  spark\-mini.. flv       (80x60)
.Ve
.IP "golem.de" 4
.IX Item "golem.de"
Format: (flv|high|ipod)
.IP "vimeo.com" 4
.IX Item "vimeo.com"
Format: (flv|hd)
.Sp
\&\s-1HD\s0 should be available for the vimeo.com/hd channel videos at least.
Note that \*(L"flv\*(R" only means the \*(L"default flv\*(R". Some of the hosted
\&\*(L"default\*(R" videos are actually \*(L"mp4\*(R", not \*(L"flv\*(R".
.Sp
For further reading:
.Sp
.Vb 1
\&  http://vimeo.com/help/hd
.Ve
.IP "video.google.com" 4
.IX Item "video.google.com"
Format: (flv|mp4)
.Sp
mp4 may not always be available.
.IP "sevenload.com" 4
.IX Item "sevenload.com"
.PD 0
.IP "break.com" 4
.IX Item "break.com"
.IP "liveleak.com" 4
.IX Item "liveleak.com"
.IP "evisor.tv" 4
.IX Item "evisor.tv"
.IP "clipfish.de" 4
.IX Item "clipfish.de"
.IP "funnyhub.com" 4
.IX Item "funnyhub.com"
.IP "myubo.com" 4
.IX Item "myubo.com"
.PD
Format: flv
.SH "FILES"
.IX Header "FILES"
.ie n .IP "\fB\fB$CCLIVE_HOME\fB|$HOME/.ccliverc\fR" 4
.el .IP "\fB\f(CB$CCLIVE_HOME\fB|$HOME/.ccliverc\fR" 4
.IX Item "$CCLIVE_HOME|$HOME/.ccliverc"
.Vb 4
\& agent      = Furball/1.0       # \-\-agent=...
\& proxy      = http://foo:1234   # \-\-proxy=...
\& limit\-rate = 50                # \-\-limit\-rate=...
\& no\-extract                     # \-\-no\-extract
.Ve
.Sp
Most of the program options can be defined in the ~/.ccliverc config file.
.SH "UNICODE"
.IX Header "UNICODE"
.IP "Q: Why am I seeing mangled video filenames?" 4
.IX Item "Q: Why am I seeing mangled video filenames?"
Make sure you have compiled cclive \-\-with\-iconv. Some of the websites may
not use \s-1UTF\-8\s0.
.Sp
Make also sure you have set the locale. For example (in csh/urxvt terms):
.Sp
.Vb 2
\&  % setenv LANG en_US.UTF\-8
\&  % urxvt &
.Ve
.Sp
You can get a list of supported locales on your typical Unix-like system with:
.Sp
.Vb 1
\&  % locale \-a
.Ve
.ie n .IP "Q: Why are the \s-1UTF\-8\s0 characters missing with \-g \-\-regexp=""(\ew|\es)""?" 4
.el .IP "Q: Why are the \s-1UTF\-8\s0 characters missing with \-g \-\-regexp=``(\ew|\es)''?" 4
.IX Item "Q: Why are the UTF-8 characters missing with -g --regexp=(w|s)?"
A quote from pcrepattern manual page:
.Sp
\&\*(L"In \s-1UTF\-8\s0 mode, characters with values greater than 128 never match  \ed,
\&\es, or \ew, and always match \eD, \eS, and \eW. This is true even when Uni\-
code character property support is available.  These  sequences  retain
their original meanings from before \s-1UTF\-8\s0 support was available, mainly
for efficiency reasons. Note that this also affects \eb, because  it  is
defined in terms of \ew and \eW.\*(R"
.Sp
Try \-\-regexp=\*(L"(\epL|\es)\*(R" instead.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
.IP "cclive \-\-debug \s-1URL\s0" 4
.IX Item "cclive --debug URL"
Causes libcurl to be verbose.
.IP "cclive \-n \s-1URL\s0" 4
.IX Item "cclive -n URL"
Simulates video extraction only.
.SH "BUGS"
.IX Header "BUGS"
Sure to be some. Please report them:
.PP
.Vb 1
\&  <http://code.google.com/p/cclive/issues/>
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
cclive exits 0 on success, and >0 if an error occurs.
.PP
.Vb 11
\&  CCLIVE_OK           = 0
\&  CCLIVE_OPT          = 1  // cmdline option parsing error
\&  CCLIVE_OPTARG       = 2  // cmdline option arg error
\&  CCLIVE_CURLINIT     = 3  // curl init error
\&  CCLIVE_NOTHINGTODO  = 4  // file already retrieved
\&  CCLIVE_SYSTEM       = 5  // system call failed
\&  CCLIVE_NOSUPPORT    = 6  // host not supported
\&  CCLIVE_NET          = 7  // network error
\&  CCLIVE_FETCH        = 8  // fetch error
\&  CCLIVE_PARSE        = 9  // parse error
\&  CCLIVE_INTERNAL     = 10 // internal error (see return code)
.Ve
.SH "OTHER"
.IX Header "OTHER"
.IP "Project page" 4
.IX Item "Project page"
<http://cclive.googlecode.com/>
.IP "Front-end" 4
.IX Item "Front-end"
<http://abby.googlecode.com/>
.IP "Development code:" 4
.IX Item "Development code:"
% git clone git://repo.or.cz/cclive.git
.SH "HISTORY"
.IX Header "HISTORY"
.IP "\(bu" 4
cclive followed the release of clive2
.IP "\(bu" 4
It was written in C and later rewritten in \*(C+
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWclive(1)\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Toni Gundogdu <legatvs@gmail.com>
.PP
Thanks to all those who have contributed to the project
by sending patches, reporting bugs and writing feedback.
You know who you are.
