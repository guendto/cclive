.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "cclive 1"
.TH cclive 1 "2009-04-23" "0.4.0" "cclive manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cclive \- video extraction utility for the flash dismissing hordes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
cclive [options] [url...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
cclive is command line video extraction utility similar to clive but with
lower requirements. It is designed to be compact and capable.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print help and exit.
.IP "\fB\-v, \-\-version\fR" 4
.IX Item "-v, --version"
Print version and exit.
.IP "\fB\-\-supported\-hosts\fR" 4
.IX Item "--supported-hosts"
Print a list of supported hosts to stdout and exit.
.IP "\fB\-q, \-\-quiet\fR" 4
.IX Item "-q, --quiet"
Turn off all output.
.IP "\fB\-\-debug\fR" 4
.IX Item "--debug"
Print libcurl debug messages to stderr.
.IP "\fB\-t, \-\-title\fR" 4
.IX Item "-t, --title"
Causes \fBcclive\fR to use video page title for output video filename.
Ignored if cclive was built \-\-with\-perl.
.IP "\fB\-\-title\-cclass=\fR\fI\s-1CCLASS\s0\fR" 4
.IX Item "--title-cclass=CCLASS"
The \fIcharacter-class\fR is used to filter the video page title. Default is \fB\ew\fR.
The filtered titles are then used for naming the video file. The default class
is usually enough for most users, others may want to read up on Perl regular
expressions and character classes.
.Sp
About using character-classes:
  http://perldoc.perl.org/perlrequick.html
Or:
  % perldoc perlrequick
.IP "\fB\-n, \-\-no\-extract\fR" 4
.IX Item "-n, --no-extract"
Do not extract any videos.
.IP "\fB\-c, \-\-continue\fR" 4
.IX Item "-c, --continue"
Resume a partially downloaded video file. May not work with some of the \s-1HTTP\s0
servers. Be sure to read the \*(L"\s-1FORMATS\s0\*(R" section.
.IP "\fB\-f, \-\-download=\fR\fI\s-1FORMAT\s0\fR" 4
.IX Item "-f, --download=FORMAT"
Extract \fIformat\fR instead of the default \*(L"flv\*(R". Possible values are \*(L"flv\*(R"
(default), \*(L"mp4\*(R", \*(L"mp4_hd\*(R", \*(L"3gpp\*(R", \*(L"xflv\*(R", \*(L"spark\*(R", \*(L"vp6\-hq\*(R", \*(L"vp6\-hd\*(R", \*(L"vp6\*(R",
\&\*(L"h264\*(R", \*(L"spak-mini\*(R". Note that only certain hosts support only certain
formats. See the \*(L"\s-1FORMATS\s0\*(R" section for more on this.
.IP "\fB\-O, \-\-output\-video=\fR\fI\s-1FILE\s0\fR" 4
.IX Item "-O, --output-video=FILE"
Write extracted video to \fIfile\fR. Do \fInot\fR use this when extracting multiple
videos on one go. Causes \fBcclive\fR to overwrite an already existing file.
.IP "\fB\-N, \-\-number\-videos\fR" 4
.IX Item "-N, --number-videos"
Number extracted video files. Causes \fBcclive\fR to add a numeric prefix to
the file names. Typically used for extracting multipart videos to keep them
in order.
.IP "\fB\-\-emit\-csv\fR" 4
.IX Item "--emit-csv"
Emit video details as \s-1CSV\s0 to stdout. Implies \fB\-\-no\-extract\fR. Note that
\&\fB\-\-quiet\fR has \fIno\fR effect on the emitted \s-1CSV\s0.
.IP "\fB\-\-limit\-rate=\fR\fI\s-1AMOUNT\s0\fR" 4
.IX Item "--limit-rate=AMOUNT"
Limit download speed to \fIamount\fR (KB/s). Limits only file transfers.
.IP "\fB\-\-agent=\fR\fI\s-1STRING\s0\fR" 4
.IX Item "--agent=STRING"
Identify \fBcclive\fR as \fIstring\fR to the \s-1HTTP\s0 servers.
.IP "\fB\-\-proxy=\fR\fI\s-1ADDRESS\s0\fR" 4
.IX Item "--proxy=ADDRESS"
Use \fIaddress\fR for \s-1HTTP\s0 proxy. By default \fBcclive\fR uses the value of the
http_proxy environment variable if it is defined. Example: http://foo:1234.
.IP "\fB\-\-no\-proxy\fR" 4
.IX Item "--no-proxy"
Do not use proxy, even if http_proxy environment variable is defined.
.IP "\fB\-\-connect\-timeout=\fR\fI\s-1SECONDS\s0\fR" 4
.IX Item "--connect-timeout=SECONDS"
Maximum time in \fIseconds\fR allowed the connection to the server to take.
This limits only the connection phase. \fBcclive\fR will only timeout
on the system's internal timeouts by default.
.Sp
http://curl.haxx.se/docs/knownbugs.html:
.Sp
.Vb 4
\&  "34. The SOCKS4 connection codes don\*(Aqt properly acknowledge
\&  (connect) timeouts. Also see #12. According to bug #1556528,
\&  even the SOCKS5 connect code does not do it right:
\&    http://curl.haxx.se/bug/view.cgi?id=1556528"
\&
\&  "12. When connecting to a SOCKS proxy, the (connect) timeout
\&  is not properly acknowledged after the actual TCP connect
\&  (during the SOCKS \*(Aqnegotiate\*(Aq phase)."
.Ve
.Sp
See also \fB\-\-connect\-timeout\-socks\fR.
.IP "\fB\-\-connect\-timeout\-socks=\fR\fI\s-1SECONDS\s0\fR" 4
.IX Item "--connect-timeout-socks=SECONDS"
Same as above but works around the \s-1SOCKS\s0 proxy bug by using \s-1CURLOPT_TIMEOUT\s0
instead of \s-1CURLOPT_CONNECTIMEOUT\s0. Ignored for file transfers, otherwise
curl could interrupt already started transfers.
.Sp
More about these two options:
  http://curl.haxx.se/libcurl/c/curl_easy_setopt.html
.IP "\fB\-u, \-\-youtube\-user=\fR\fI\s-1USERNAME\s0\fR" 4
.IX Item "-u, --youtube-user=USERNAME"
Causes \fBcclive\fR to log into Youtube as \fIusername\fR. This is done \fIbefore\fR
extraction, even if the batch does not contain any Youtube hosted links.
.IP "\fB\-p, \-\-youtube\-pass=\fR\fI\s-1PASSWORD\s0\fR" 4
.IX Item "-p, --youtube-pass=PASSWORD"
Use \fIpassword\fR for Youtube login.  If undefined, \fBcclive\fR prompts for it.
.IP "\fB\-\-exec=\fR\fI\s-1COMMAND\s0\fR\fB;\fR" 4
.IX Item "--exec=COMMAND;"
Execute \fIcommand\fR after each file transfer. Optional arguments may be passed
to the command. The expression must be terminated by a semicolon (\*(L";\*(R"). If the
specifier \*(L"%i\*(R" appears anywhere in \fIcommand\fR name or the arguments it is
replaced by the pathname of the extracted video file.
.Sp
Example:
  % cclive \-\-exec=\*(L"mplayer \-really\-quiet \f(CW%i\fR;\*(R" \s-1URL\s0
.IP "\fB\-\-exec=\fR\fI\s-1COMMAND\s0\fR\fB+\fR" 4
.IX Item "--exec=COMMAND+"
Same as \fB\-\-exec\fR, except that \*(L"%i\*(R" is replaced with as many pathnames
as possible for the invocation of \fIcommand\fR.
.IP "\fB\-\-stream\-exec=\fR\fI\s-1COMMAND\s0\fR" 4
.IX Item "--stream-exec=COMMAND"
Execute \fIcommand\fR when file transfer progress reaches \fIpercent\fR as defined
with the \fB\-\-stream\fR option. The \*(L"%i\*(R" specifier for video pathname is expected
to appear somewhere in the \fIcommand\fR expression.
.Sp
Unlike the \fB\-\-exec\fR option which is executed subsequently after each file
transfer, \fBcclive\fR forks the streaming process and continues with the file
transfer \*(-- and will not continue to download another file until the child
process terminates.
.Sp
It should also be noted that \fBcclive\fR makes no effort to check whether there
is enough data to be streamed. It assumes the user knows how much data needs
to be buffered before starting the child process. Similarly, if the transfer
rate drops significantly after starting the process and it runs out of data,
\&\fBcclive\fR simply ignores that.
.Sp
Some players and formats may not work properly with this feature. Use
\&\fImplayer\fR\|(1) and choose flv if you are unsure.
.IP "\fB\-\-stream=\fR\fI\s-1PERCENT\s0\fR" 4
.IX Item "--stream=PERCENT"
Execute the \fIcommand\fR defined with the \fB\-\-stream\-exec\fR option when the
file transfer progress reaches \fIpercent\fR.
.Sp
Example:
  % cclive \-\-stream\-exec=\*(L"mplayer \-really\-quiet \f(CW%i\fR\*(R" \-\-stream=20 \s-1URL\s0
.IP "\fB\-\-print\-fname\fR" 4
.IX Item "--print-fname"
Print output filename on a dedicated line before each file transfer.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Typical use:
  % cclive \s-1URL\s0
.PP
Download mp4 format of the video from the \s-1URL:\s0
  % cclive \-f mp4 \s-1URL\s0
.PP
Play the downloaded video with \fImplayer\fR\|(1) subsequently:
  % cclive \-\-exec=\*(L"mplayer \-really\-quiet \f(CW%i\fR;\*(R" \s-1URL\s0
.PP
Extract audio to an mp3 file from the downloaded video with \fIffmpeg\fR\|(1):
  % cclive \-\-exec=\*(L"ffmpeg \-i \f(CW%i\fR \f(CW%i\fR.mp3;\*(R" \s-1URL\s0
.PP
Start playing the video being downloaded with \fImplayer\fR\|(1) when the transfer
reaches 20% mark:
  % cclive \-\-stream\-exec=\*(L"mplayer \-really\-quiet \f(CW%i\fR\*(R" \-\-stream=20 \s-1URL\s0
.SH "FORMATS"
.IX Header "FORMATS"
.Vb 7
\&  youtube.com
\&    * flv/mp4/mp4_hd/3gpp/xflv
\&    * Resuming flv with \-\-continue does not work
\&    * 3gpp and xflv formats may not always be available
\&    * mp4_hd format is currently available for a limited
\&      number of videos, which are usually explicitly marked
\&      as "HD" or "720p"
\&
\&  video.google.com
\&    * flv/mp4
\&    * Resuming flv with \-\-continue does not work
\&    * mp4 format may not always be available
\&    * mp4 != youtube\-mp4
\&
\&  break.com | evisor.tv | sevenload.com | liveleak.com
\&    * flv
\&
\&  dailymotion.com
\&    * spark | spak\-mini | vp6\-hq | vp6\-hd | vp6 | h264
\&    * spark is the "regular" 320x240 flv
\&    * cclive defaults to spark if format is not available
\&
\&  last.fm
\&    * cclive can extract the videos marked as youtube videos
\&    * see "youtube.com" above for format info
.Ve
.SH "FILES"
.IX Header "FILES"
.ie n .IP "\fB\fB$HOME\fB/.ccliverc\fR, for example:" 4
.el .IP "\fB\f(CB$HOME\fB/.ccliverc\fR, for example:" 4
.IX Item "$HOME/.ccliverc, for example:"
.Vb 6
\& agent      = Furball/1.0       # \-\-agent=...
\& proxy      = http://foo:1234   # \-\-proxy=...
\& limit\-rate = 50                # \-\-limit\-rate=...
\& title                          # \-\-title
\& no\-extract                     # \-\-no\-extract
\& # ...
.Ve
.Sp
Basically all command-line options can be defined in the config file. Note
that command-line options override the config file definitions.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
cclive exits 0 on success, and >0 if an error occurs.
.SH "OTHER"
.IX Header "OTHER"
Project page:
  http://code.google.com/p/cclive/
.PP
Development code:
  % git clone git://repo.or.cz/cclive.git
.PP
Release announcements:
  http://freshmeat.net/projects/cclive/
.PP
Front-end:
  http://code.google.com/p/abby/
.SH "HISTORY"
.IX Header "HISTORY"
cclive first appeared early 2009 following the release of clive2.
It was originally written in C but was later rewritten in \*(C+.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIclive\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
Toni Gundogdu <legatvs@gmail.com>
