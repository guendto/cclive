=pod

=head1 NAME

cclive - media download tool

=head1 SYNOPSIS

cclive [options] [url | file...]

=head1 DESCRIPTION

cclive is a tool for downloading media from YouTube and similar
websites. It has a low memory footprint compared to other existing
tools.

=head1 HISTORY

cclive is a rewrite of C<clive(1)> in C++.

=head1 OPTIONS

=over 4

=item B<--version>

Print version and exit.

=item B<--help>

Print help and exit.

=item B<--license>

Print license and exit.

=item B<--support>

Print supported websites, formats and exit.

=item B<--verbose-libcurl>

Turn on libcurl verbose output.

=item B<-q, --quiet>

Turn off all output to stdout and stderr.

=item B<-b, --background>

Go to background after startup. Output will be written to
the file specified with C<--log-file>.

=item B<-f, --format> I<arg> (=default)

Download I<arg> format of the media. The I<arg> may be C<help>.

=item B<-c, --continue>

Resume partially downloaded media.

=item B<-W, --overwrite>

Overwrite existing media.

=item B<-O, --output-file> I<arg>

Write media to I<arg>. Overrides C<--filename-format>.

=item B<-n, --no-download>

Do not download the media, print details only.

=item B<-r, --no-resolve>

Do not resolve HTTP redirections to another location.

URL shortening services typically require following an HTTP redirection
to another location. If this switch is used, cclive will no longer work
with such services.

Available only if cclive was compiled with quvi 0.2.16+, this switch
deprecates the C<--no-shortened> switch found in earlier cclive
versions.

=item B<-s, --no-shortened> (deprecated)

Do not "decompress" shortened URLs before using them. Available only
if cclive was compiled with quvi 0.2.8 - 0.2.15. Use C<--no-resolve>
instead.

=item B<--no-proxy>

Disable use of HTTP proxy. Overrides both C<--proxy> and http_proxy environment
settings.

=item B<--log-file> I<arg> (=cclive_log)

Write log data to I<arg> file. Ignored unless used with C<--background>.
Overwrites the existing I<arg> file (if any).

See also C<--background> and C<--update-interval>.

=item B<--update-interval> I<arg> (=1)

Specify I<arg> progressbar update interval in seconds. The value may be
of 'double' type, e.g. 0.2 or 1.99.

=item B<--config-file> I<arg> (=$HOME/.ccliverc)

Path to a file to read cclive arguments from.

=back

=head1 OPTIONS - CONFIGURATION

In addition to the command line, the configurable options may also be read
from the configuration file. See L</FILES>.

=over 4

=item B<--filename-format> I<arg> (="%t.%s")

Specify how the downloaded media file should be saved as.
The following specifiers may be used in the I<arg>:

  %t .. Media title (after applying --regexp and --subst)
  %i .. Media ID
  %h .. Media host ID (e.g. "vimeo")
  %s .. Media file suffix (e.g. "flv")

I<All> occurences of the specifier will be replaced. See also
C<--output-file>.

=item B<--output-dir> I<arg>

Write downloaded media to I<arg> directory.

=item B< --regexp> I<arg> (="/(\w|\s)/g")

Use regular expression I<arg> to clean up the media title before it
is used in the filename. The syntax supports both "i"
(case-insensitive) and "g" (global or "find all").

=item B<-s, --subst> I<arg> ...

Use I<arg> substitution regular expression to replace the matched
occurences in the title before it is used in the filename. To use
multiple expressions, separate each in I<arg> with a whitespace.
The syntax supports "i" (case-insensitive) and "g" (global or
"find all").

The following delimiters may be used:

  <> {} () /

Note:

  s/old/new/  .. Invalid
  s/old//new/ .. OK

=item B<--exec> I<arg>

Invoke I<arg> when download has finished. The following specifiers can
be used in the I<arg>:

  %f .. Full path to the downloaded media file

I<All> occurences of the specifier will be replaced.

=item B<--agent> I<arg> (="Mozilla/5.0")

Identify as I<arg> to the HTTP servers.

=item B<--proxy> I<arg>

Use I<arg> for HTTP proxy, e.g. "http://foo:1234". Overrides the http_proxy
environment setting.

=item B<--throttle> I<arg> (=0, disabled)

Do not exceed the transfer rate of I<arg> (KB/s).

=item B<--connect-timeout> I<arg> (=30)

This option wraps the CURLOPT_CONNECTTIMEOUT (libcurl):

"Pass a long. It should contain the maximum time in seconds that
you allow the connection to the server to take.

This only limits the connection phase, once it has connected,
this option is of no more use. Set to zero to disable connection
timeout (it will then only timeout on the system's internal
timeouts). See also the CURLOPT_TIMEOUT option."
-- C<curl_easy_setopt(3)>

=item B<--transfer-timeout> I<arg> (=0, disabled)

This option wraps the CURLOPT_TIMEOUT (libcurl):

"Pass a long as parameter containing the maximum time in seconds
that you allow the libcurl transfer operation to take.

Normally, name lookups can take a considerable time and limiting
operations to less than a few minutes risk aborting perfectly
normal operations. This option will cause curl to use the
SIGALRM to enable time-outing system calls."
-- C<curl_easy_setopt(3)>

=item B<--dns-cache-timeout> I<arg> (=60)

This option wraps the CURLOPT_DNS_CACHE_TIMEOUT (libcurl):

"Pass a long, this sets the timeout in seconds. Name resolves will
be kept in memory for this number of seconds. Set to zero to
completely disable caching, or set to -1 to make the cached
entries remain forever. By default, libcurl caches this info
for 60 seconds.

The name resolve functions of various libc implementations don't
re-read name server information unless explicitly told so
(for example, by calling C<res_init(3)>). This may cause libcurl
to keep using the older server even if DHCP has updated the
server info, and this may look like a DNS cache issue to the
casual libcurl-app user."
-- C<curl_easy_setopt(3)>

=item B<--max-retries> I<arg> (=5, 0=disabled)

Retry downloading I<arg> times before giving up.

=item B<--retry-wait> I<arg> (=5)

Wait I<arg> seconds before retrying after a failed attempt.

=back

=head1 EXAMPLES

=over 4

=item B<cclive "URL">

Typical use.

=item B<cclive "YOUTUBE_URL" -f mp4_360p>

Same but get the mp4_360p format of the media, instead.

=item B<cclive -f list youtube>

Print the supported formats for "youtube".

=item B<cclive -f list yout>

Yields the same results.

=item B<cclive "URL" -n>

Do not download the media, print the details only.

=item B<echo "URL" | cclive>

Read input from the pipeline. Similarly:

  % cat >> URLs
  URL1
  URL2
  (^D)
  % cclive < URLs
  Or:
  % cclive URLs

Separate each URL with a newline.

=item B<cclive "URL" -s "s{Alice}{Malice}">

Replace "Alice" in the media title with "Malice" before it is used in
the filename.

=item B<cclive "URL" -s "s{Alice}E<lt>MaliceE<gt> s{wonderland}E<lt>UberlandE<gt>i">

Similar but makes two substitions instead of just one. The former
substitution was explained above, the latter replaces "Wonderland"
with "Uberland". Note also the "i" for case-insensitive.

You can use "g" for global (or "find all"), e.g.:

  s{Alice}<Malice>g

=item B<cclive "URL" -b --log-file foo.log>

Go to background, redirect output to C<foo.log>.

=item B<kill -USR1 $cclive_pid>

Interrupt the current download (of $cclive_pid). This makes cclive move
to the next URL in the queue (if any).

=back

=head1 FILES

=over 4

=item B<$HOME/.ccliverc>

You can specify the I<configurable> options
(see L</OPTIONS - CONFIGURATION>) in the configuration file, e.g.:

 filename-format = %h_%i_(%t).%s
 regexp = /(\w|\pL)/g
 exec = /usr/bin/vlc %f
 proxy = http://foo:1234
 throttle = 10
 connect-timeout = 120

You can also use C<--config-file> to specify the file.

=back

=head1 EXIT STATUS

cclive exits with 0 on success and >0 if an (unrecoverable) error
occurred.

=head1 DEBUGGING TIPS

=over 4

=item B<--no-download>

Use the C<--no-download> switch when you don't need to download the
media.

=item B<--verbose-libcurl>

Make libcurl verbose.

=item B<Debug symbols>

Compile cclive with C<-g>, see also C<gcc(1)>.

=item B<Other tools>

See also C<gdb(1)>, C<strace(1)> and C<valgrind(1)>.

=back

=head1 WWW

<http://cclive.sourceforge.net/>

=head1 AUTHOR

Toni Gundogdu <legatvs at sign gmail com>.

Thanks to all those who have contributed to the project by sending
patches, reporting bugs and writing feedback. You know who you are.

=cut
