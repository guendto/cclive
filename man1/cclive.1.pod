=pod

=head1 NAME

cclive - video download tool

=head1 SYNOPSIS

cclive [options] [url...]

=head1 DESCRIPTION

cclive is a command line tool for downloading videos from Youtube and other
similar video websites that require Adobe Flash to view the video content.
It has low memory footprint compared to other similar tools. It is a rewrite
of the clive software in C++.

=head1 OPTIONS

=over 4

=item B<--version>

Print version and exit.

=item B<--help>

Print help and exit.

=item B<--license>

Print license and exit.

=item B<--support>

Print supported websites, formats and exit.

=item B<--verbose-libcurl>

Turn on libcurl verbose output.

=item B<-q, --quiet>

Turn off all output but errors.

=item B<-b, --background>

Go to background after startup. Output will be written to
the file specified with C<--log-file>.

=item B<-f, --format> I<arg>

Download I<arg> format of the video. I<arg> can also be C<help>.

=item B<-c, --continue>

Resume partially downloaded video.

=item B<-W, --overwrite>

Overwrite existing video.

=item B<-O, --output-file> I<arg>

Write video to I<arg>. Overrides C<--filename-format>.

=item B<-n, --no-download>

Do not download the video, display video details only.

=item B<--no-proxy>

Disable use of HTTP proxy. Overrides both C<--proxy> and http_proxy environment
settings.

=item B<--log-file> I<arg>

Write log data to I<arg> file. Ignored unless C<--background> is used.
Overwrites the existing file. Default is "cclive_log". See also
C<--background> and C<--update-interval>.

=item B<--update-interval> I<arg>

Specify I<arg> progressbar update interval. Default is 1 second.
You can use double type values, e.g. 0.2 or 1.99.

=item B<--config-file> I<arg>

Path to a file to read cclive arguments from. The default is "~/.ccliverc".

=back

=head1 OPTIONS - CONFIGURATION

You can specify these options in the configuration file.

=over 4

=item B<--filename-format> I<arg>

Use I<arg> to specify the video output filename format. The default
is "%t.%s". The following specifiers are supported: %t video title
%i video ID %h video host ID %s video file suffix

  %t    video title
  %i    video id
  %h    video host id
  %s    video file suffix

Note that I<all> occurences of the specifier will be replaced. See also
C<--output-file>.

=item B<--output-dir> I<arg>

Write downloaded videos to I<arg> directory.

=item B< --regexp> I<arg>

Use regular expression I<arg> to clean up the video title before it
is used in the output filename. The default is "/(\w|\s)/g".

Note that the syntax supports both "i" (case-insensitive) and "g"
(global or find all).

=item B<-s, --subst> I<arg> ...

Use I<arg> substitution regular expression to replace the matched
occurences in the title before it is used in the filename. More than
one expression can be specified in I<arg> if each is separated by a
whitespace. Supports "i" (case-insensitive) and "g" (global, find all).

You can use the following delimiters:

  <> {} () /

Please make a note that, cclive currently considers:

  s/old/new/    Invalid
  s/old//new/   OK

=item B<--exec> I<arg>

Invoke I<arg> after video download finishes. The following specifiers
are supported:

  %f    full path to the downloaded video file

Note that I<all> occurences of the specifier will be replaced.

=item B<--agent> I<arg>

Identify as I<arg> to the HTTP servers.

=item B<--proxy> I<arg>

Use I<arg> for HTTP proxy, e.g. "http://foo:1234". Overrides the http_proxy
environment setting.

=item B<--throttle> I<arg>

Limit download transfer rate to I<arg> KB/s. Default is 0 (disabled).

=item B<--connect-timeout> I<arg>

This option essentially wraps the CURLOPT_CONNECTTIMEOUT of libcurl.
Default is 30.

  "Pass a long. It should contain the maximum time in seconds that
  you allow the connection to the server to take.

  This only limits the connection phase, once it has connected,
  this option is of no more use. Set to zero to disable connection
  timeout (it will then only timeout on the system's internal
  timeouts). See also the CURLOPT_TIMEOUT option."
        -- C<curl_easy_setopt(3)>

=item B<--transfer-timeout> I<arg>

This option essentially wraps the CURLOPT_TIMEOUT of libcurl.
Default is 0 (disabled).

  "Pass a long as parameter containing the maximum time in seconds
  that you allow the libcurl transfer operation to take.

  Normally, name lookups can take a considerable time and limiting
  operations to less than a few minutes risk aborting perfectly
  normal operations. This option will cause curl to use the
  SIGALRM to enable time-outing system calls."
        -- C<curl_easy_setopt(3)>

=item B<--dns-cache-timeout> I<arg>

This option essentially wraps the CURLOPT_DNS_CACHE_TIMEOUT of
libcurl. Default is 60.

  "Pass a long, this sets the timeout in seconds. Name resolves will
  be kept in memory for this number of seconds. Set to zero to
  completely disable caching, or set to -1 to make the cached
  entries remain forever. By default, libcurl caches this info
  for 60 seconds.

  The name resolve functions of various libc implementations don't
  re-read name server information unless explicitly told so
  (for example, by calling C<res_init(3)>). This may cause libcurl
  to keep using the older server even if DHCP has updated the
  server info, and this may look like a DNS cache issue to the
  casual libcurl-app user." -- C<curl_easy_setopt(3)>

=item B<--max-retries> I<arg>

Retry downloading I<arg> times before giving up. Setting I<arg> to zero will
disable retrying. Default is 5.

=item B<--retry-wait> I<arg>

Wait I<arg> seconds before retrying after a failed attempt. Default is 5.

=back

=head1 EXAMPLES

=over 4

=item B<cclive "http://www.youtube.com/watch?v=DUM1284TqFc">

Typical use.

=item B<cclive "http://www.youtube.com/watch?v=DUM1284TqFc" -f mp4_360p>

Same but get the mp4_360p (Youtube specific) format instead. See
C<--support> for a complete list of websites and formats.

=item B<cclive "http://www.youtube.com/watch?v=DUM1284TqFc" -n>

Do not download the video. Print the video details only.

=item B<echo "http://www.youtube.com/watch?v=DUM1284TqFc" | cclive>

Yet another way to feed cclive with an URL.

You can also feed cclive several URLs on one go, either by adding each
on the command line (arg1, arg2, ...) or by redirecting them, for example,
from a file. Each URL must be separated with a newline (or a whitespace).

Consider the following example:

  cat >> urls.lst
  http://www.youtube.com/watch?v=DUM1284TqFc
  http://www.youtube.com/watch?v=TqgTz8ymZl8
  (ctrl+d)
  cclive < urls.lst

=item B<cclive "URL" -s "s{Alice}{Malice}">

Replace "Alice" in the video title with "Malice" before using it in the
filename.

=item B<cclive "URL" -s "s{Alice}E<lt>MaliceE<gt> s{wonderland}E<lt>UberlandE<gt>i">

Similar but makes two substitions, the former was explained above, the latter
replaces "Wonderland" with "Uberland". Note the use of "i" (case-insensitive).

You can use "g" for global (find all), e.g. if you wanted to replace all of
the "Alice" occurences with "Malice", you could use "s{Alice}E<lt>MaliceE<gt>g".

=back

=head1 FILES

=over 4

=item B<$HOME/.ccliverc>

You can specify the configurable options (see L</OPTIONS - CONFIGURATION>)
in this file, e.g.:

 filename-format = %h_%i_(%t).%s
 regexp = /(\w|\pL)/g
 exec = /usr/bin/vlc %f
 proxy = http://foo:1234
 throttle = 10
 connect-timeout = 120

Note that you can use C<--config-file> to specify the file.

=back

=head1 EXIT STATUS

cclive exits with 0 on success and >0 if an (unrecoverable) error
occurred.

=head1 DEBUGGING TIPS

=over 4

=item B<--no-download>

Use the C<--no-download> switch if you don't need to download the video.

=item B<--verbose-libcurl>

You can use this switch to amp up libcurl verbosity.

=item B<Debug symbols>

Compile cclive with C<-g> (see C<g++(1)>) for debug symbols.

=item B<Other tools>

Make use of such tools as C<strace(1)>, C<gdb(1)> and C<valgrind(1)>.
They may prove invaluable.

=back

=head1 WWW

<http://cclive.sourceforge.net/>

=head1 AUTHOR

Toni Gundogdu <legatvs at sign gmail com>.

Thanks to all those who have contributed to the project
by sending patches, reporting bugs and writing feedback.
You know who you are.

=cut
